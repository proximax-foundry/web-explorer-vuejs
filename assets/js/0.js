(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./src/models/const/hashType.ts":
/*!**************************************!*\
  !*** ./src/models/const/hashType.ts ***!
  \**************************************/
/*! exports provided: HashType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HashType\", function() { return HashType; });\nvar HashType;\n(function (HashType) {\n    HashType[HashType[\"Sha3_256\"] = 0] = \"Sha3_256\";\n    HashType[HashType[\"Keccak_256\"] = 1] = \"Keccak_256\";\n    HashType[HashType[\"Hash_160\"] = 2] = \"Hash_160\";\n    HashType[HashType[\"Hash_256\"] = 3] = \"Hash_256\";\n})(HashType || (HashType = {}));\n\n\n//# sourceURL=webpack:///./src/models/const/hashType.ts?");

/***/ }),

/***/ "./src/models/transactions/aliasNamespace.ts":
/*!***************************************************!*\
  !*** ./src/models/transactions/aliasNamespace.ts ***!
  \***************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack:///./src/models/transactions/aliasNamespace.ts?");

/***/ }),

/***/ "./src/models/transactions/commonTransaction.ts":
/*!******************************************************!*\
  !*** ./src/models/transactions/commonTransaction.ts ***!
  \******************************************************/
/*! exports provided: CommonTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CommonTransaction\", function() { return CommonTransaction; });\nclass CommonTransaction {\n    constructor(txnHash) {\n        this.type = \"\";\n        this.maxFee = 0;\n        this.signer = \"\";\n        this.signerAddress = \"\";\n        this.signerName = \"\";\n        this.deadline = null;\n        this.hash = txnHash;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/commonTransaction.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/account.ts":
/*!******************************************************!*\
  !*** ./src/models/transactions/confirmed/account.ts ***!
  \******************************************************/
/*! exports provided: ConfirmedAccountTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAccountTransaction\", function() { return ConfirmedAccountTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedAccountTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.approvalDelta = 0;\n        this.removalDelta = 0;\n        this.oldApprovalNumber = null;\n        this.oldRemovalNumber = null;\n        this.addedCosigner = [];\n        this.removedCosigner = [];\n        this.modifyingAccountPublicKey = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/account.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/aggregate.ts":
/*!********************************************************!*\
  !*** ./src/models/transactions/confirmed/aggregate.ts ***!
  \********************************************************/
/*! exports provided: ConfirmedAggregateTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAggregateTransaction\", function() { return ConfirmedAggregateTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedAggregateTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.aggregateLength = 0;\n        this.txnList = [];\n        this.cosigners = [];\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/aggregate.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/alias.ts":
/*!****************************************************!*\
  !*** ./src/models/transactions/confirmed/alias.ts ***!
  \****************************************************/
/*! exports provided: ConfirmedAliasTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAliasTransaction\", function() { return ConfirmedAliasTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedAliasTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.aliasName = \"\";\n        this.aliasType = 0;\n        this.aliasTypeName = \"\";\n        this.address = \"\";\n        this.assetId = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/alias.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/asset.ts":
/*!****************************************************!*\
  !*** ./src/models/transactions/confirmed/asset.ts ***!
  \****************************************************/
/*! exports provided: ConfirmedAssetTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAssetTransaction\", function() { return ConfirmedAssetTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedAssetTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.assetId = \"\";\n        this.nonce = null;\n        this.namespaceName = null;\n        this.levyAssetId = null;\n        this.levyAssetAmount = null;\n        this.levyAssetAmountIsRaw = null;\n        this.levyType = null;\n        this.levyRecipient = null;\n        this.levyAssetName = null;\n        this.supplyDelta = null;\n        this.supplyDeltaIsRaw = null;\n        this.divisibility = null;\n        this.transferable = null;\n        this.supplyMutable = null;\n        this.duration = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/asset.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/chain.ts":
/*!****************************************************!*\
  !*** ./src/models/transactions/confirmed/chain.ts ***!
  \****************************************************/
/*! exports provided: ConfirmedChainTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedChainTransaction\", function() { return ConfirmedChainTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedChainTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.applyHeightDelta = null;\n        this.networkConfig = null; // not assigning for dashboard\n        this.supportedEntityVersions = null; // not assigning for dashboard\n        this.newVersion = null;\n        this.upgradePeriod = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/chain.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/confirmed.ts":
/*!********************************************************!*\
  !*** ./src/models/transactions/confirmed/confirmed.ts ***!
  \********************************************************/
/*! exports provided: ConfirmedTransaction, ConfirmedAliasTransaction, ConfirmedMetadataTransaction, ConfirmedTransferTransaction, ConfirmedAggregateTransaction, ConfirmedAssetTransaction, ConfirmedChainTransaction, ConfirmedNamespaceTransaction, ConfirmedLockTransaction, ConfirmedAccountTransaction, ConfirmedSecretTransaction, ConfirmedRestrictionTransaction, ConfirmedLinkTransaction, ConfirmedExchangeTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedTransaction\", function() { return _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"]; });\n\n/* harmony import */ var _alias__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alias */ \"./src/models/transactions/confirmed/alias.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAliasTransaction\", function() { return _alias__WEBPACK_IMPORTED_MODULE_1__[\"ConfirmedAliasTransaction\"]; });\n\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./metadata */ \"./src/models/transactions/confirmed/metadata.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedMetadataTransaction\", function() { return _metadata__WEBPACK_IMPORTED_MODULE_2__[\"ConfirmedMetadataTransaction\"]; });\n\n/* harmony import */ var _transfer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transfer */ \"./src/models/transactions/confirmed/transfer.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedTransferTransaction\", function() { return _transfer__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedTransferTransaction\"]; });\n\n/* harmony import */ var _aggregate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./aggregate */ \"./src/models/transactions/confirmed/aggregate.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAggregateTransaction\", function() { return _aggregate__WEBPACK_IMPORTED_MODULE_4__[\"ConfirmedAggregateTransaction\"]; });\n\n/* harmony import */ var _asset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./asset */ \"./src/models/transactions/confirmed/asset.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAssetTransaction\", function() { return _asset__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedAssetTransaction\"]; });\n\n/* harmony import */ var _chain__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chain */ \"./src/models/transactions/confirmed/chain.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedChainTransaction\", function() { return _chain__WEBPACK_IMPORTED_MODULE_6__[\"ConfirmedChainTransaction\"]; });\n\n/* harmony import */ var _namespace__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./namespace */ \"./src/models/transactions/confirmed/namespace.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedNamespaceTransaction\", function() { return _namespace__WEBPACK_IMPORTED_MODULE_7__[\"ConfirmedNamespaceTransaction\"]; });\n\n/* harmony import */ var _lock__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lock */ \"./src/models/transactions/confirmed/lock.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedLockTransaction\", function() { return _lock__WEBPACK_IMPORTED_MODULE_8__[\"ConfirmedLockTransaction\"]; });\n\n/* harmony import */ var _account__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./account */ \"./src/models/transactions/confirmed/account.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAccountTransaction\", function() { return _account__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedAccountTransaction\"]; });\n\n/* harmony import */ var _secret__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./secret */ \"./src/models/transactions/confirmed/secret.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedSecretTransaction\", function() { return _secret__WEBPACK_IMPORTED_MODULE_10__[\"ConfirmedSecretTransaction\"]; });\n\n/* harmony import */ var _restriction__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./restriction */ \"./src/models/transactions/confirmed/restriction.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedRestrictionTransaction\", function() { return _restriction__WEBPACK_IMPORTED_MODULE_11__[\"ConfirmedRestrictionTransaction\"]; });\n\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./link */ \"./src/models/transactions/confirmed/link.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedLinkTransaction\", function() { return _link__WEBPACK_IMPORTED_MODULE_12__[\"ConfirmedLinkTransaction\"]; });\n\n/* harmony import */ var _exchange__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./exchange */ \"./src/models/transactions/confirmed/exchange.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedExchangeTransaction\", function() { return _exchange__WEBPACK_IMPORTED_MODULE_13__[\"ConfirmedExchangeTransaction\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/confirmed.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/confirmedTransaction.ts":
/*!*******************************************************************!*\
  !*** ./src/models/transactions/confirmed/confirmedTransaction.ts ***!
  \*******************************************************************/
/*! exports provided: ConfirmedTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedTransaction\", function() { return ConfirmedTransaction; });\n/* harmony import */ var _commonTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commonTransaction */ \"./src/models/transactions/commonTransaction.ts\");\n\nclass ConfirmedTransaction extends _commonTransaction__WEBPACK_IMPORTED_MODULE_0__[\"CommonTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.timestamp = \"\";\n        this.block = 0;\n        this.fee = 0;\n        this.groupType = \"confirmed\";\n    }\n    static convertToSubClass(subclass, instance) {\n        let newTxn = new subclass(instance.hash);\n        Object.assign(newTxn, instance);\n        return newTxn;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/confirmedTransaction.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/exchange.ts":
/*!*******************************************************!*\
  !*** ./src/models/transactions/confirmed/exchange.ts ***!
  \*******************************************************/
/*! exports provided: ConfirmedExchangeTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedExchangeTransaction\", function() { return ConfirmedExchangeTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedExchangeTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.exchangeOffers = [];\n        this.isTakingOffer = false;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/exchange.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/link.ts":
/*!***************************************************!*\
  !*** ./src/models/transactions/confirmed/link.ts ***!
  \***************************************************/
/*! exports provided: ConfirmedLinkTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedLinkTransaction\", function() { return ConfirmedLinkTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedLinkTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.remotePublicKey = \"\";\n        this.action = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/link.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/lock.ts":
/*!***************************************************!*\
  !*** ./src/models/transactions/confirmed/lock.ts ***!
  \***************************************************/
/*! exports provided: ConfirmedLockTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedLockTransaction\", function() { return ConfirmedLockTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedLockTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.lockHash = \"\";\n        this.duration = 0;\n        this.expired = null;\n        this.isRefunded = null;\n        this.amountLocking = 0;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/lock.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/metadata.ts":
/*!*******************************************************!*\
  !*** ./src/models/transactions/confirmed/metadata.ts ***!
  \*******************************************************/
/*! exports provided: ConfirmedMetadataTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedMetadataTransaction\", function() { return ConfirmedMetadataTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedMetadataTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.metadataType = 0;\n        this.metadataTypeName = \"\";\n        this.scopedMetadataKey = \"\";\n        this.targetPublicKey = \"\";\n        this.targetId = \"\";\n        this.targetIdName = \"\";\n        this.sizeChanged = 0;\n        this.valueChange = \"\";\n        this.oldValue = \"\";\n        this.newValue = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/metadata.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/namespace.ts":
/*!********************************************************!*\
  !*** ./src/models/transactions/confirmed/namespace.ts ***!
  \********************************************************/
/*! exports provided: ConfirmedNamespaceTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedNamespaceTransaction\", function() { return ConfirmedNamespaceTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedNamespaceTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.namespaceId = \"\";\n        this.namespaceName = \"\";\n        this.registerType = 0;\n        this.registerTypeName = \"\";\n        this.isExtend = false;\n        this.duration = 0;\n        this.parentId = \"\";\n        this.parentName = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/namespace.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/restriction.ts":
/*!**********************************************************!*\
  !*** ./src/models/transactions/confirmed/restriction.ts ***!
  \**********************************************************/
/*! exports provided: ConfirmedRestrictionTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedRestrictionTransaction\", function() { return ConfirmedRestrictionTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedRestrictionTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.restrictionTypeOutput = \"\"; // Allow / Block\n        this.restrictionType = 0;\n        this.modification = [];\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/restriction.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/secret.ts":
/*!*****************************************************!*\
  !*** ./src/models/transactions/confirmed/secret.ts ***!
  \*****************************************************/
/*! exports provided: ConfirmedSecretTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedSecretTransaction\", function() { return ConfirmedSecretTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedSecretTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.secret = \"\";\n        this.hashType = \"\";\n        this.proof = \"\";\n        this.recipient = \"\";\n        this.assetId = null;\n        this.namespaceName = \"\";\n        this.isSendWithNamespace = false;\n        this.amount = 0;\n        this.amountIsRaw = true;\n        this.duration = 0;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/secret.ts?");

/***/ }),

/***/ "./src/models/transactions/confirmed/transfer.ts":
/*!*******************************************************!*\
  !*** ./src/models/transactions/confirmed/transfer.ts ***!
  \*******************************************************/
/*! exports provided: ConfirmedTransferTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedTransferTransaction\", function() { return ConfirmedTransferTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/models/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedTransferTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.in_out = null;\n        this.sender = null;\n        this.recipient = null;\n        this.recipientNamespaceId = null;\n        this.recipientNamespaceName = null;\n        this.sda = [];\n        this.amountTransfer = 0;\n        this.message = null;\n        this.messageType = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/confirmed/transfer.ts?");

/***/ }),

/***/ "./src/models/transactions/exchangeOffer.ts":
/*!**************************************************!*\
  !*** ./src/models/transactions/exchangeOffer.ts ***!
  \**************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack:///./src/models/transactions/exchangeOffer.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/account.ts":
/*!**************************************************!*\
  !*** ./src/models/transactions/inner/account.ts ***!
  \**************************************************/
/*! exports provided: InnerAccountTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerAccountTransaction\", function() { return InnerAccountTransaction; });\n/* harmony import */ var _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/models/transactions/inner/innerTxn */ \"./src/models/transactions/inner/innerTxn.ts\");\n\nclass InnerAccountTransaction extends _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__[\"InnerTransaction\"] {\n    constructor() {\n        super();\n        this.approvalDelta = 0;\n        this.removalDelta = 0;\n        this.oldApprovalNumber = null;\n        this.oldRemovalNumber = null;\n        this.addedCosigner = [];\n        this.removedCosigner = [];\n        this.modifyingAccountPublicKey = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/account.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/alias.ts":
/*!************************************************!*\
  !*** ./src/models/transactions/inner/alias.ts ***!
  \************************************************/
/*! exports provided: InnerAliasTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerAliasTransaction\", function() { return InnerAliasTransaction; });\n/* harmony import */ var _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/models/transactions/inner/innerTxn */ \"./src/models/transactions/inner/innerTxn.ts\");\n\nclass InnerAliasTransaction extends _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__[\"InnerTransaction\"] {\n    constructor() {\n        super();\n        this.aliasName = \"\";\n        this.aliasType = 0;\n        this.aliasTypeName = \"\";\n        this.address = \"\";\n        this.assetId = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/alias.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/asset.ts":
/*!************************************************!*\
  !*** ./src/models/transactions/inner/asset.ts ***!
  \************************************************/
/*! exports provided: InnerAssetTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerAssetTransaction\", function() { return InnerAssetTransaction; });\n/* harmony import */ var _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/models/transactions/inner/innerTxn */ \"./src/models/transactions/inner/innerTxn.ts\");\n\nclass InnerAssetTransaction extends _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__[\"InnerTransaction\"] {\n    constructor() {\n        super();\n        this.assetId = \"\";\n        this.nonce = null;\n        this.namespaceName = null;\n        this.levyAssetId = null;\n        this.levyAssetAmount = null;\n        this.levyAssetAmountIsRaw = null;\n        this.levyType = null;\n        this.levyRecipient = null;\n        this.levyAssetName = null;\n        this.supplyDelta = null;\n        this.supplyDeltaIsRaw = null;\n        this.divisibility = null;\n        this.transferable = null;\n        this.supplyMutable = null;\n        this.duration = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/asset.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/chain.ts":
/*!************************************************!*\
  !*** ./src/models/transactions/inner/chain.ts ***!
  \************************************************/
/*! exports provided: InnerChainTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerChainTransaction\", function() { return InnerChainTransaction; });\n/* harmony import */ var _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/models/transactions/inner/innerTxn */ \"./src/models/transactions/inner/innerTxn.ts\");\n\nclass InnerChainTransaction extends _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__[\"InnerTransaction\"] {\n    constructor() {\n        super();\n        this.applyHeightDelta = null;\n        this.networkConfig = null; // not assigning for dashboard\n        this.supportedEntityVersions = null; // not assigning for dashboard\n        this.newVersion = null;\n        this.upgradePeriod = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/chain.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/exchange.ts":
/*!***************************************************!*\
  !*** ./src/models/transactions/inner/exchange.ts ***!
  \***************************************************/
/*! exports provided: InnerExchangeTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerExchangeTransaction\", function() { return InnerExchangeTransaction; });\n/* harmony import */ var _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/models/transactions/inner/innerTxn */ \"./src/models/transactions/inner/innerTxn.ts\");\n\nclass InnerExchangeTransaction extends _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__[\"InnerTransaction\"] {\n    constructor() {\n        super();\n        this.exchangeOffers = [];\n        this.isTakingOffer = false;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/exchange.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/inner.ts":
/*!************************************************!*\
  !*** ./src/models/transactions/inner/inner.ts ***!
  \************************************************/
/*! exports provided: InnerTransaction, InnerAliasTransaction, InnerMetadataTransaction, InnerTransferTransaction, InnerAssetTransaction, InnerChainTransaction, InnerNamespaceTransaction, InnerLockTransaction, InnerAccountTransaction, InnerSecretTransaction, InnerRestrictionTransaction, InnerLinkTransaction, InnerExchangeTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _innerTxn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./innerTxn */ \"./src/models/transactions/inner/innerTxn.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerTransaction\", function() { return _innerTxn__WEBPACK_IMPORTED_MODULE_0__[\"InnerTransaction\"]; });\n\n/* harmony import */ var _alias__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alias */ \"./src/models/transactions/inner/alias.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerAliasTransaction\", function() { return _alias__WEBPACK_IMPORTED_MODULE_1__[\"InnerAliasTransaction\"]; });\n\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./metadata */ \"./src/models/transactions/inner/metadata.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerMetadataTransaction\", function() { return _metadata__WEBPACK_IMPORTED_MODULE_2__[\"InnerMetadataTransaction\"]; });\n\n/* harmony import */ var _transfer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transfer */ \"./src/models/transactions/inner/transfer.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerTransferTransaction\", function() { return _transfer__WEBPACK_IMPORTED_MODULE_3__[\"InnerTransferTransaction\"]; });\n\n/* harmony import */ var _asset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./asset */ \"./src/models/transactions/inner/asset.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerAssetTransaction\", function() { return _asset__WEBPACK_IMPORTED_MODULE_4__[\"InnerAssetTransaction\"]; });\n\n/* harmony import */ var _chain__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chain */ \"./src/models/transactions/inner/chain.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerChainTransaction\", function() { return _chain__WEBPACK_IMPORTED_MODULE_5__[\"InnerChainTransaction\"]; });\n\n/* harmony import */ var _namespace__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./namespace */ \"./src/models/transactions/inner/namespace.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerNamespaceTransaction\", function() { return _namespace__WEBPACK_IMPORTED_MODULE_6__[\"InnerNamespaceTransaction\"]; });\n\n/* harmony import */ var _lock__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lock */ \"./src/models/transactions/inner/lock.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerLockTransaction\", function() { return _lock__WEBPACK_IMPORTED_MODULE_7__[\"InnerLockTransaction\"]; });\n\n/* harmony import */ var _account__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./account */ \"./src/models/transactions/inner/account.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerAccountTransaction\", function() { return _account__WEBPACK_IMPORTED_MODULE_8__[\"InnerAccountTransaction\"]; });\n\n/* harmony import */ var _secret__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./secret */ \"./src/models/transactions/inner/secret.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerSecretTransaction\", function() { return _secret__WEBPACK_IMPORTED_MODULE_9__[\"InnerSecretTransaction\"]; });\n\n/* harmony import */ var _restriction__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./restriction */ \"./src/models/transactions/inner/restriction.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerRestrictionTransaction\", function() { return _restriction__WEBPACK_IMPORTED_MODULE_10__[\"InnerRestrictionTransaction\"]; });\n\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./link */ \"./src/models/transactions/inner/link.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerLinkTransaction\", function() { return _link__WEBPACK_IMPORTED_MODULE_11__[\"InnerLinkTransaction\"]; });\n\n/* harmony import */ var _exchange__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./exchange */ \"./src/models/transactions/inner/exchange.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerExchangeTransaction\", function() { return _exchange__WEBPACK_IMPORTED_MODULE_12__[\"InnerExchangeTransaction\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/inner.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/innerTxn.ts":
/*!***************************************************!*\
  !*** ./src/models/transactions/inner/innerTxn.ts ***!
  \***************************************************/
/*! exports provided: InnerTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerTransaction\", function() { return InnerTransaction; });\nclass InnerTransaction {\n    constructor() {\n        this.uniqueHash = '';\n        this.type = \"\";\n        this.signer = \"\";\n        this.signerAddress = \"\";\n        this.signerName = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/innerTxn.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/link.ts":
/*!***********************************************!*\
  !*** ./src/models/transactions/inner/link.ts ***!
  \***********************************************/
/*! exports provided: InnerLinkTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerLinkTransaction\", function() { return InnerLinkTransaction; });\n/* harmony import */ var _innerTxn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./innerTxn */ \"./src/models/transactions/inner/innerTxn.ts\");\n\nclass InnerLinkTransaction extends _innerTxn__WEBPACK_IMPORTED_MODULE_0__[\"InnerTransaction\"] {\n    constructor() {\n        super();\n        this.remotePublicKey = \"\";\n        this.action = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/link.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/lock.ts":
/*!***********************************************!*\
  !*** ./src/models/transactions/inner/lock.ts ***!
  \***********************************************/
/*! exports provided: InnerLockTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerLockTransaction\", function() { return InnerLockTransaction; });\n/* harmony import */ var _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/models/transactions/inner/innerTxn */ \"./src/models/transactions/inner/innerTxn.ts\");\n\nclass InnerLockTransaction extends _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__[\"InnerTransaction\"] {\n    constructor() {\n        super();\n        this.lockHash = \"\";\n        this.duration = 0;\n        this.expired = null;\n        this.isRefunded = null;\n        this.amountLocking = 0;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/lock.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/metadata.ts":
/*!***************************************************!*\
  !*** ./src/models/transactions/inner/metadata.ts ***!
  \***************************************************/
/*! exports provided: InnerMetadataTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerMetadataTransaction\", function() { return InnerMetadataTransaction; });\n/* harmony import */ var _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/models/transactions/inner/innerTxn */ \"./src/models/transactions/inner/innerTxn.ts\");\n\nclass InnerMetadataTransaction extends _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__[\"InnerTransaction\"] {\n    constructor() {\n        super();\n        this.metadataType = 0;\n        this.metadataTypeName = \"\";\n        this.scopedMetadataKey = \"\";\n        this.targetPublicKey = \"\";\n        this.targetId = \"\";\n        this.targetIdName = \"\";\n        this.sizeChanged = 0;\n        this.valueChange = \"\";\n        this.oldValue = \"\";\n        this.newValue = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/metadata.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/namespace.ts":
/*!****************************************************!*\
  !*** ./src/models/transactions/inner/namespace.ts ***!
  \****************************************************/
/*! exports provided: InnerNamespaceTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerNamespaceTransaction\", function() { return InnerNamespaceTransaction; });\n/* harmony import */ var _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/models/transactions/inner/innerTxn */ \"./src/models/transactions/inner/innerTxn.ts\");\n\nclass InnerNamespaceTransaction extends _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__[\"InnerTransaction\"] {\n    constructor() {\n        super();\n        this.namespaceId = \"\";\n        this.namespaceName = \"\";\n        this.registerType = 0;\n        this.registerTypeName = \"\";\n        this.isExtend = false;\n        this.duration = 0;\n        this.parentId = \"\";\n        this.parentName = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/namespace.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/restriction.ts":
/*!******************************************************!*\
  !*** ./src/models/transactions/inner/restriction.ts ***!
  \******************************************************/
/*! exports provided: InnerRestrictionTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerRestrictionTransaction\", function() { return InnerRestrictionTransaction; });\n/* harmony import */ var _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/models/transactions/inner/innerTxn */ \"./src/models/transactions/inner/innerTxn.ts\");\n\nclass InnerRestrictionTransaction extends _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__[\"InnerTransaction\"] {\n    constructor() {\n        super();\n        this.restrictionTypeOutput = \"\"; // Allow / Block\n        this.restrictionType = 0;\n        this.modification = [];\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/restriction.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/secret.ts":
/*!*************************************************!*\
  !*** ./src/models/transactions/inner/secret.ts ***!
  \*************************************************/
/*! exports provided: InnerSecretTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerSecretTransaction\", function() { return InnerSecretTransaction; });\n/* harmony import */ var _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/models/transactions/inner/innerTxn */ \"./src/models/transactions/inner/innerTxn.ts\");\n\nclass InnerSecretTransaction extends _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__[\"InnerTransaction\"] {\n    constructor() {\n        super();\n        this.secret = \"\";\n        this.hashType = \"\";\n        this.proof = \"\";\n        this.recipient = \"\";\n        this.assetId = null;\n        this.namespaceName = \"\";\n        this.isSendWithNamespace = false;\n        this.amount = 0;\n        this.amountIsRaw = true;\n        this.duration = 0;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/secret.ts?");

/***/ }),

/***/ "./src/models/transactions/inner/transfer.ts":
/*!***************************************************!*\
  !*** ./src/models/transactions/inner/transfer.ts ***!
  \***************************************************/
/*! exports provided: InnerTransferTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerTransferTransaction\", function() { return InnerTransferTransaction; });\n/* harmony import */ var _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/models/transactions/inner/innerTxn */ \"./src/models/transactions/inner/innerTxn.ts\");\n\nclass InnerTransferTransaction extends _models_transactions_inner_innerTxn__WEBPACK_IMPORTED_MODULE_0__[\"InnerTransaction\"] {\n    constructor() {\n        super();\n        this.in_out = null;\n        this.sender = null;\n        this.recipient = null;\n        this.recipientNamespaceId = null;\n        this.recipientNamespaceName = null;\n        this.sda = [];\n        this.amountTransfer = 0;\n        this.message = null;\n        this.messageType = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/transactions/inner/transfer.ts?");

/***/ }),

/***/ "./src/models/transactions/restrictionModification.ts":
/*!************************************************************!*\
  !*** ./src/models/transactions/restrictionModification.ts ***!
  \************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack:///./src/models/transactions/restrictionModification.ts?");

/***/ }),

/***/ "./src/models/transactions/sda.ts":
/*!****************************************!*\
  !*** ./src/models/transactions/sda.ts ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack:///./src/models/transactions/sda.ts?");

/***/ }),

/***/ "./src/models/transactions/transaction.ts":
/*!************************************************!*\
  !*** ./src/models/transactions/transaction.ts ***!
  \************************************************/
/*! exports provided: InnerTransaction, InnerAliasTransaction, InnerMetadataTransaction, InnerTransferTransaction, InnerAssetTransaction, InnerChainTransaction, InnerNamespaceTransaction, InnerLockTransaction, InnerAccountTransaction, InnerSecretTransaction, InnerRestrictionTransaction, InnerLinkTransaction, InnerExchangeTransaction, ConfirmedTransaction, ConfirmedAliasTransaction, ConfirmedMetadataTransaction, ConfirmedTransferTransaction, ConfirmedAggregateTransaction, ConfirmedAssetTransaction, ConfirmedChainTransaction, ConfirmedNamespaceTransaction, ConfirmedLockTransaction, ConfirmedAccountTransaction, ConfirmedSecretTransaction, ConfirmedRestrictionTransaction, ConfirmedLinkTransaction, ConfirmedExchangeTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _aliasNamespace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aliasNamespace */ \"./src/models/transactions/aliasNamespace.ts\");\n/* empty/unused harmony star reexport *//* harmony import */ var _sda__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sda */ \"./src/models/transactions/sda.ts\");\n/* empty/unused harmony star reexport *//* harmony import */ var _inner_inner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./inner/inner */ \"./src/models/transactions/inner/inner.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerTransaction\", function() { return _inner_inner__WEBPACK_IMPORTED_MODULE_2__[\"InnerTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerAliasTransaction\", function() { return _inner_inner__WEBPACK_IMPORTED_MODULE_2__[\"InnerAliasTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerMetadataTransaction\", function() { return _inner_inner__WEBPACK_IMPORTED_MODULE_2__[\"InnerMetadataTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerTransferTransaction\", function() { return _inner_inner__WEBPACK_IMPORTED_MODULE_2__[\"InnerTransferTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerAssetTransaction\", function() { return _inner_inner__WEBPACK_IMPORTED_MODULE_2__[\"InnerAssetTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerChainTransaction\", function() { return _inner_inner__WEBPACK_IMPORTED_MODULE_2__[\"InnerChainTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerNamespaceTransaction\", function() { return _inner_inner__WEBPACK_IMPORTED_MODULE_2__[\"InnerNamespaceTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerLockTransaction\", function() { return _inner_inner__WEBPACK_IMPORTED_MODULE_2__[\"InnerLockTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerAccountTransaction\", function() { return _inner_inner__WEBPACK_IMPORTED_MODULE_2__[\"InnerAccountTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerSecretTransaction\", function() { return _inner_inner__WEBPACK_IMPORTED_MODULE_2__[\"InnerSecretTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerRestrictionTransaction\", function() { return _inner_inner__WEBPACK_IMPORTED_MODULE_2__[\"InnerRestrictionTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerLinkTransaction\", function() { return _inner_inner__WEBPACK_IMPORTED_MODULE_2__[\"InnerLinkTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InnerExchangeTransaction\", function() { return _inner_inner__WEBPACK_IMPORTED_MODULE_2__[\"InnerExchangeTransaction\"]; });\n\n/* harmony import */ var _restrictionModification__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./restrictionModification */ \"./src/models/transactions/restrictionModification.ts\");\n/* empty/unused harmony star reexport *//* harmony import */ var _exchangeOffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./exchangeOffer */ \"./src/models/transactions/exchangeOffer.ts\");\n/* empty/unused harmony star reexport *//* harmony import */ var _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./confirmed/confirmed */ \"./src/models/transactions/confirmed/confirmed.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAliasTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedAliasTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedMetadataTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedMetadataTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedTransferTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedTransferTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAggregateTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedAggregateTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAssetTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedAssetTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedChainTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedChainTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedNamespaceTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedNamespaceTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedLockTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedLockTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAccountTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedAccountTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedSecretTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedSecretTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedRestrictionTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedRestrictionTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedLinkTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedLinkTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedExchangeTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedExchangeTransaction\"]; });\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./src/models/transactions/transaction.ts?");

/***/ }),

/***/ "./src/models/util/transactionUtils.ts":
/*!*********************************************!*\
  !*** ./src/models/util/transactionUtils.ts ***!
  \*********************************************/
/*! exports provided: MsgType, InnerTxnLegendType, transactionTypeName, TransactionUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MsgType\", function() { return MsgType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InnerTxnLegendType\", function() { return InnerTxnLegendType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transactionTypeName\", function() { return transactionTypeName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TransactionUtils\", function() { return TransactionUtils; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tsjs-xpx-chain-sdk */ \"./node_modules/tsjs-xpx-chain-sdk/dist/index.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _state_networkState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/state/networkState */ \"./src/state/networkState.ts\");\n/* harmony import */ var _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/util/chainUtils */ \"./src/util/chainUtils.ts\");\n/* harmony import */ var _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/models/REST/chainAPICall */ \"./src/models/REST/chainAPICall.ts\");\n/* harmony import */ var _typeHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./typeHelper */ \"./src/models/util/typeHelper.ts\");\n/* harmony import */ var _state_appState__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/state/appState */ \"./src/state/appState.ts\");\n/* harmony import */ var _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/models/transactions/transaction */ \"./src/models/transactions/transaction.ts\");\n/* harmony import */ var _models_const_hashType__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/models/const/hashType */ \"./src/models/const/hashType.ts\");\n\n\n\n// import { mergeMap, timeout, filter, map, first, skip } from 'rxjs/operators';\n\n\n\n\n\n\n\nvar MsgType;\n(function (MsgType) {\n    MsgType[MsgType[\"NONE\"] = 0] = \"NONE\";\n    MsgType[MsgType[\"GREEN\"] = 1] = \"GREEN\";\n    MsgType[MsgType[\"RED\"] = 2] = \"RED\";\n    MsgType[MsgType[\"INFO\"] = 3] = \"INFO\";\n})(MsgType || (MsgType = {}));\nvar InnerTxnLegendType;\n(function (InnerTxnLegendType) {\n    InnerTxnLegendType[InnerTxnLegendType[\"NONE\"] = 0] = \"NONE\";\n    InnerTxnLegendType[InnerTxnLegendType[\"ADD_REMOVE\"] = 1] = \"ADD_REMOVE\";\n    InnerTxnLegendType[InnerTxnLegendType[\"TRUE_FALSE\"] = 2] = \"TRUE_FALSE\";\n    InnerTxnLegendType[InnerTxnLegendType[\"BUY_SELL\"] = 3] = \"BUY_SELL\";\n    InnerTxnLegendType[InnerTxnLegendType[\"ALLOW_BLOCK\"] = 4] = \"ALLOW_BLOCK\";\n})(InnerTxnLegendType || (InnerTxnLegendType = {}));\nconst networkAPIEndpoint = Object(vue__WEBPACK_IMPORTED_MODULE_1__[\"computed\"])(() => { var _a; return _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].buildAPIEndpoint(_state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].selectedAPIEndpoint, (_a = _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile) === null || _a === void 0 ? void 0 : _a.httpPort); });\nconst localNetworkType = Object(vue__WEBPACK_IMPORTED_MODULE_1__[\"computed\"])(() => { var _a; return _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getNetworkType((_a = _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile) === null || _a === void 0 ? void 0 : _a.network.type); });\nconst namespaceIdFirstCharacterString = \"89ABCDEF\";\nconst nativeTokenNamespaceId = Object(vue__WEBPACK_IMPORTED_MODULE_1__[\"computed\"])(() => new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceId\"](_state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.fullNamespace).toHex());\nconst transactionTypeName = {\n    transfer: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].TRANSFER,\n        name: 'Transfer'\n    },\n    registerNameSpace: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REGISTER_NAMESPACE,\n        name: 'Register Namespace'\n    },\n    mosaicDefinition: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_DEFINITION,\n        name: 'SDA Definition'\n    },\n    mosaicSupplyChange: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_SUPPLY_CHANGE,\n        name: 'SDA Supply Change'\n    },\n    modifyMultisigAccount: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MULTISIG_ACCOUNT,\n        name: 'Modify Multisig Account'\n    },\n    aggregateComplete: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_COMPLETE,\n        name: 'Aggregate Complete'\n    },\n    aggregateBonded: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_BONDED,\n        name: 'Aggregate Bonded'\n    },\n    mosaicAlias: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_ALIAS,\n        name: 'SDA Alias'\n    },\n    addressAlias: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADDRESS_ALIAS,\n        name: 'Address Alias'\n    },\n    lock: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LOCK,\n        name: 'LockFund'\n    },\n    accountLink: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LINK_ACCOUNT,\n        name: 'Account Link'\n    },\n    exchangeOffer: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].EXCHANGE_OFFER,\n        name: 'Exchange Offer'\n    },\n    addExchangeOffer: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADD_EXCHANGE_OFFER,\n        name: 'Add Exchange Offer'\n    },\n    removeExchangeOffer: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REMOVE_EXCHANGE_OFFER,\n        name: 'Remove Exchange Offer'\n    },\n    modifyAccountMetadata: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_METADATA,\n        name: 'Modify Account Metadata'\n    },\n    modifyMosaicMetadata: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MOSAIC_METADATA,\n        name: 'Modify SDA Metadata'\n    },\n    modifyNamespaceMetadata: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_NAMESPACE_METADATA,\n        name: 'Modify Namespace Metadata'\n    },\n    modifyAccountRestrictionAddress: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_ADDRESS,\n        name: 'Modify Account Address Restriction'\n    },\n    modifyAccountRestrictionMosaic: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_MOSAIC,\n        name: 'Modify Account SDA Restriction'\n    },\n    modifyAccountRestrictionOperation: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_OPERATION,\n        name: 'Modify Account Operation Restriction'\n    },\n    chainConfigure: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_CONFIGURE,\n        name: 'Chain Configure'\n    },\n    chainUpgrade: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_UPGRADE,\n        name: 'Chain Upgrade'\n    },\n    secretLock: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_LOCK,\n        name: \"Secret Lock\"\n    },\n    secretProof: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_PROOF,\n        name: \"Secret Proof\"\n    },\n    modifyAccountMetadata_v2: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ACCOUNT_METADATA_V2,\n        name: \"Account Metadata\"\n    },\n    modifyMosaicMetadata_v2: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_METADATA_V2,\n        name: \"SDA Metadata\"\n    },\n    modifyNamespaceMetadata_v2: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].NAMESPACE_METADATA_V2,\n        name: \"Namespace Metadata\"\n    },\n    modifyMosaicLevy: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MOSAIC_LEVY,\n        name: \"Modify SDA Levy\"\n    },\n    removeRemoveLevy: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REMOVE_MOSAIC_LEVY,\n        name: \"Remove SDA Levy\"\n    }\n};\nclass TransactionUtils {\n    static getAccInfo(address) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            const chainAPICall = new _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_5__[\"ChainAPICall\"](networkAPIEndpoint.value);\n            const accountInfo = yield chainAPICall.accountAPI.getAccountInfo(address);\n            // console.log(publicKey);\n            return accountInfo;\n        });\n    }\n    static getTransactionTypeNameByEnum(transactionType) {\n        let name = \"\";\n        for (let key in transactionTypeName) {\n            if (transactionType === transactionTypeName[key].id) {\n                name = transactionTypeName[key].name;\n                break;\n            }\n        }\n        return name;\n    }\n    static getFee(transaction) {\n        return transaction.maxFee.compact();\n    }\n    static getFakeEncryptedMessageSize(message) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"EncryptedMessage\"].create(message, tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(\"0\".repeat(64), _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getNetworkType(localNetworkType.value)), \"0\".repeat(64)).size();\n    }\n    static getPlainMessageSize(message) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PlainMessage\"].create(message).size();\n    }\n    static signTransaction(transaction, account, generationHash) {\n        return account.sign(transaction, generationHash);\n    }\n    static aggregateToCosignatureTransaction(aggregateTransaction) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"CosignatureTransaction\"].create(aggregateTransaction);\n    }\n    static cosignTransaction(transactionToCosign, account) {\n        const cosignatureTransaction = TransactionUtils.aggregateToCosignatureTransaction(transactionToCosign);\n        return account.signCosignatureTransaction(cosignatureTransaction);\n    }\n    static getTransactions(publicAccount, queryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactions = yield _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getAccountTransactions(publicAccount, queryParams);\n            return transactions;\n        });\n    }\n    static searchTransactions(txnGroupType, queryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactionsResult = yield _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].searchTransactions(txnGroupType, queryParams);\n            return transactionsResult;\n        });\n    }\n    static getUnconfirmedTransactions(publicAccount, queryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactions = yield _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getAccountUnconfirmedTransactions(publicAccount, queryParams);\n            return transactions;\n        });\n    }\n    static getPartialTransactions(publicAccount, queryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactions = yield _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getAccountPartialTransactions(publicAccount, queryParams);\n            return transactions;\n        });\n    }\n    static getResolvedAsset(mosaicId, blockHeight) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let resolvedAsset = null;\n            if (TransactionUtils.isNamespace(mosaicId)) {\n                let receipts = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.blockAPI.getBlockReceipts(blockHeight);\n                for (let i = 0; i < receipts.mosaicResolutionStatements.length; ++i) {\n                    let unresolved = receipts.mosaicResolutionStatements[i].unresolved;\n                    let resolved = receipts.mosaicResolutionStatements[i].resolutionEntries[0].resolved;\n                    if (unresolved instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MosaicId\"]) { // actually is namespaceId\n                        let namespaceIdHex = unresolved.toHex();\n                        if (mosaicId.toHex() !== namespaceIdHex) {\n                            continue;\n                        }\n                        if (resolved instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MosaicAlias\"]) {\n                            resolvedAsset = resolved.mosaicId;\n                            break;\n                        }\n                        else {\n                            continue;\n                        }\n                    }\n                    else {\n                        continue;\n                    }\n                }\n            }\n            else {\n                resolvedAsset = mosaicId;\n            }\n            return resolvedAsset;\n        });\n    }\n    // static announceTransaction(signedTx: SignedTransaction): void {\n    //   ChainUtils.announceTransaction(signedTx);\n    // }\n    // static announceBondedTransaction(signedTx: SignedTransaction): void {\n    //   ChainUtils.announceBondedTransaction(signedTx);\n    // }\n    // static announceCosignatureSignedTransaction(signedTx: CosignatureSignedTransaction) :void {\n    //   ChainUtils.announceCosignTransaction(signedTx);\n    // }\n    static getRecipient(transferTxn, blockHeight) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let recipient = null;\n            if (transferTxn.recipient instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceId\"]) {\n                let receipts = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.blockAPI.getBlockReceipts(blockHeight);\n                for (let i = 0; i < receipts.addressResolutionStatements.length; ++i) {\n                    let unresolved = receipts.addressResolutionStatements[i].unresolved;\n                    let resolved = receipts.addressResolutionStatements[i].resolutionEntries[0].resolved;\n                    if (unresolved instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MosaicId\"]) { // actually is namespaceId\n                        let namespaceIdHex = unresolved.toHex();\n                        if (transferTxn.recipient.toHex() !== namespaceIdHex) {\n                            continue;\n                        }\n                        if (resolved instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"AddressAlias\"]) {\n                            recipient = resolved.address;\n                            break;\n                        }\n                        else {\n                            continue;\n                        }\n                    }\n                    else {\n                        continue;\n                    }\n                }\n            }\n            else {\n                recipient = transferTxn.recipient;\n            }\n            return recipient;\n        });\n    }\n    static getTransactionTypeName(type) {\n        let typeName = \"\";\n        switch (type) {\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADDRESS_ALIAS:\n                typeName = transactionTypeName.addressAlias.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADD_EXCHANGE_OFFER:\n                typeName = transactionTypeName.addExchangeOffer.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_BONDED:\n                typeName = transactionTypeName.aggregateBonded.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_COMPLETE:\n                typeName = transactionTypeName.aggregateComplete.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_CONFIGURE:\n                typeName = transactionTypeName.chainConfigure.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_UPGRADE:\n                typeName = transactionTypeName.chainUpgrade.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].EXCHANGE_OFFER:\n                typeName = transactionTypeName.exchangeOffer.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REMOVE_EXCHANGE_OFFER:\n                typeName = transactionTypeName.removeExchangeOffer.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LINK_ACCOUNT:\n                typeName = transactionTypeName.accountLink.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LOCK:\n                typeName = transactionTypeName.lock.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_METADATA:\n                typeName = transactionTypeName.modifyAccountMetadata.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MOSAIC_METADATA:\n                typeName = transactionTypeName.modifyMosaicMetadata.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_NAMESPACE_METADATA:\n                typeName = transactionTypeName.modifyNamespaceMetadata.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_ADDRESS:\n                typeName = transactionTypeName.modifyAccountRestrictionAddress.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_MOSAIC:\n                typeName = transactionTypeName.modifyAccountRestrictionMosaic.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_OPERATION:\n                typeName = transactionTypeName.modifyAccountRestrictionOperation.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MULTISIG_ACCOUNT:\n                typeName = transactionTypeName.modifyMultisigAccount.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_ALIAS:\n                typeName = transactionTypeName.mosaicAlias.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_DEFINITION:\n                typeName = transactionTypeName.mosaicDefinition.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_SUPPLY_CHANGE:\n                typeName = transactionTypeName.mosaicSupplyChange.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REGISTER_NAMESPACE:\n                typeName = transactionTypeName.registerNameSpace.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_LOCK:\n                typeName = transactionTypeName.secretLock.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_PROOF:\n                typeName = transactionTypeName.secretProof.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].TRANSFER:\n                typeName = transactionTypeName.transfer.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ACCOUNT_METADATA_V2:\n                typeName = transactionTypeName.modifyAccountMetadata_v2.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_METADATA_V2:\n                typeName = transactionTypeName.modifyMosaicMetadata_v2.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].NAMESPACE_METADATA_V2:\n                typeName = transactionTypeName.modifyNamespaceMetadata_v2.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MOSAIC_LEVY:\n                typeName = transactionTypeName.modifyMosaicLevy.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REMOVE_MOSAIC_LEVY:\n                typeName = transactionTypeName.removeRemoveLevy.name;\n                break;\n            default:\n                typeName = null;\n                break;\n        }\n        return typeName;\n    }\n    static getTransaction(hash) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            try {\n                let txn = {};\n                let txnStatus = {};\n                txnStatus = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.transactionAPI.getTransactionStatus(hash);\n                if (txnStatus.group == 'partial') {\n                    txn = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.transactionAPI.getPartialTransaction(hash);\n                }\n                else if (txnStatus.group == 'failed') {\n                    return { txn: {}, txnStatus, isFound: true };\n                }\n                else {\n                    txn = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.transactionAPI.getTransaction(hash);\n                }\n                // get fee\n                let transactionInfo = txn.transactionInfo;\n                let txnHash = transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"AggregateTransactionInfo\"] ? transactionInfo.aggregateHash : transactionInfo.hash;\n                let blockHeight = 0;\n                let txnBytes = 0;\n                let deadline = null;\n                if (transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"AggregateTransactionInfo\"]) {\n                    //let aggregateTxn = await this.autoFindAggregateTransaction(txnHash);\n                    blockHeight = transactionInfo.height.compact();\n                    //txnBytes = aggregateTxn.serialize().length / 2;\n                    //deadline = aggregateTxn.deadline.adjustedValue.compact();\n                }\n                else if (txn.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_BONDED || txn.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_COMPLETE) {\n                    let aggregateTxn = yield TransactionUtils.autoFindAggregateTransaction(txnHash);\n                    blockHeight = aggregateTxn.transactionInfo.height.compact();\n                    txnBytes = aggregateTxn.serialize().length / 2;\n                    deadline = aggregateTxn.deadline.adjustedValue.compact();\n                }\n                else {\n                    blockHeight = transactionInfo.height.compact();\n                    // wait SDK to fix\n                    try {\n                        txnBytes = txn.serialize().length / 2;\n                    }\n                    catch (error) {\n                        console.log(error);\n                    }\n                    deadline = txn.deadline.adjustedValue.compact();\n                }\n                if (txnStatus.group == 'partial') {\n                    // txn.deadline = deadline;\n                    txn.timestamp = _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].formatDeadline(deadline);\n                    txn.fee = '-';\n                }\n                else {\n                    let blockInfo = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.blockAPI.getBlockByHeight(blockHeight);\n                    txn.fee = txnBytes * blockInfo.feeMultiplier;\n                    // txn.deadline = Helper.formatDeadline(deadline);\n                    txn.timestamp = _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].convertDisplayDateTimeFormat(new Date(blockInfo.timestamp.compact() + tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Deadline\"].timestampNemesisBlock * 1000).toISOString());\n                }\n                if (txn.type == tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].TRANSFER) {\n                    let sdas = [];\n                    for (let y = 0; y < txn.mosaics.length; ++y) {\n                        let rawAmount = txn.mosaics[y].amount.compact();\n                        let actualAmount = rawAmount;\n                        let assetId;\n                        let isSendWithNamespace = TransactionUtils.isNamespace(txn.mosaics[y].id);\n                        if (isSendWithNamespace) {\n                            let namespaceId = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceId\"](txn.mosaics[y].id.toDTO().id);\n                            assetId = yield TransactionUtils.getAssetAlias(namespaceId);\n                        }\n                        else {\n                            assetId = txn.mosaics[y].id;\n                        }\n                        let assetIdHex = assetId.toHex();\n                        txn.amountTransfer = 0;\n                        if ([_state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.assetId, nativeTokenNamespaceId.value].includes(assetIdHex)) {\n                            txn.amountTransfer += TransactionUtils.convertToExactNativeAmount(actualAmount);\n                            continue;\n                        }\n                        let assetInfo = yield TransactionUtils.getAssetInfo(assetId.toHex());\n                        let newSDA = {\n                            amount: _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].convertToCurrency(rawAmount, assetInfo.divisibility),\n                            id: assetIdHex,\n                        };\n                        let assetName = yield TransactionUtils.getAssetName(assetIdHex);\n                        if (assetName.names[0]) {\n                            newSDA.name = assetName.names[0].name;\n                        }\n                        sdas.push(newSDA);\n                    }\n                    txn.amount = sdas;\n                }\n                return { txn, txnStatus, isFound: true };\n            }\n            catch (e) {\n                return { isFound: 'error' };\n                console.error(e);\n            }\n        });\n    }\n    static isNamespace(mosaicId) {\n        return Array.from(namespaceIdFirstCharacterString).includes(mosaicId.toHex().toUpperCase().substring(0, 1));\n    }\n    static getAssetAlias(namespaceId) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let assetId = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.namespaceAPI.getLinkedMosaicId(namespaceId);\n            return assetId;\n        });\n    }\n    static getAssetInfo(assetId) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let mosaicId = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MosaicId\"](assetId);\n            let assetInfo = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.assetAPI.getMosaic(mosaicId);\n            return assetInfo;\n        });\n    }\n    static getAddressAlias(namespaceId) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let address = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.namespaceAPI.getLinkedAddress(namespaceId);\n            return address;\n        });\n    }\n    static getAssetName(assetId) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let mosaicId = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MosaicId\"](assetId);\n            let assetNames = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.assetAPI.getMosaicsNames([mosaicId]);\n            return assetNames[0];\n        });\n    }\n    static getAssetsName(mosaicIds) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let assetNames = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.assetAPI.getMosaicsNames(mosaicIds);\n            return assetNames;\n        });\n    }\n    static getAssetMetadata(assetId, scopedMetadataKey) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let metadataQP = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MetadataQueryParams\"]();\n            metadataQP.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MetadataType\"].MOSAIC;\n            metadataQP.scopedMetadataKey = scopedMetadataKey;\n            metadataQP.targetId = assetId;\n            let metadataResult = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.metadataAPI.searchMetadatas(metadataQP);\n            return metadataResult.metadataEntries.length ? metadataResult.metadataEntries[0] : null;\n        });\n    }\n    static getAccountMetadata(targetKey, scopedMetadataKey) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let metadataQP = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MetadataQueryParams\"]();\n            metadataQP.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MetadataType\"].ACCOUNT;\n            metadataQP.scopedMetadataKey = scopedMetadataKey;\n            metadataQP.targetKey = targetKey;\n            let metadataResult = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.metadataAPI.searchMetadatas(metadataQP);\n            return metadataResult.metadataEntries.length ? metadataResult.metadataEntries[0] : null;\n        });\n    }\n    static getNamespaces(namespaceId) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let namespaceInfo = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.namespaceAPI.getNamespace(namespaceId);\n            return namespaceInfo;\n        });\n    }\n    static getNamespacesName(namespaceIds) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let namespacesName = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.namespaceAPI.getNamespacesName(namespaceIds);\n            return namespacesName;\n        });\n    }\n    static getNamespaceMetadata(nsId, scopedMetadataKey) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let metadataQP = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MetadataQueryParams\"]();\n            metadataQP.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MetadataType\"].NAMESPACE;\n            metadataQP.scopedMetadataKey = scopedMetadataKey;\n            metadataQP.targetId = nsId;\n            let metadataResult = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.metadataAPI.searchMetadatas(metadataQP);\n            return metadataResult.metadataEntries.length ? metadataResult.metadataEntries[0] : null;\n        });\n    }\n    /**\n       * @param oldValue - string\n       * @param valueChange - hex string\n       * @param sizeDelta\n       */\n    static applyValueChange(oldValue, valueChange, sizeDelta) {\n        let newSize = (tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Convert\"].utf8ToHex(oldValue).length / 2) + sizeDelta;\n        let oldValueBytes = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Convert\"].hexToUint8(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Convert\"].utf8ToHex(oldValue));\n        let valueChangeBytes = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Convert\"].hexToUint8(valueChange);\n        let valueUint8Array = new Uint8Array(newSize);\n        for (let i = 0; i < valueUint8Array.length; ++i) {\n            valueUint8Array[i] = oldValueBytes[i] ^ valueChangeBytes[i];\n        }\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Convert\"].decodeHexToUtf8(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Convert\"].uint8ToHex(valueUint8Array));\n    }\n    static convertToExactNativeAmount(amount) {\n        if (_state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.divisibility === 0) {\n            return amount;\n        }\n        return amount > 0 ? amount / Math.pow(10, _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.divisibility) : 0;\n    }\n    static convertToExactAmount(amount, divisibility) {\n        if (divisibility === 0) {\n            return amount;\n        }\n        return amount > 0 ? amount / Math.pow(10, divisibility) : 0;\n    }\n    static convertToSwapType(txnMessage) {\n        let newType = null;\n        try {\n            if (txnMessage) {\n                let messageData = JSON.parse(txnMessage);\n                if (messageData.type) {\n                    switch (messageData.type) {\n                        case 'Swap':\n                            newType = 'Swap (nis1-XPX)';\n                            break;\n                        case 'Swap-bsc-xpx':\n                            newType = 'Swap (BSC-XPX)';\n                            break;\n                        case 'Swap-xpx-bsc':\n                            newType = 'Swap (XPX-BSC)';\n                            break;\n                        case 'Swap-xpx-bsc-fees':\n                            newType = 'Swap Fee (XPX-BSC)';\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n        catch (error) { }\n        return newType;\n    }\n    static extractInnerTransaction(innerTransaction) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactionDetails;\n            let tempData;\n            switch (innerTransaction.type) {\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADDRESS_ALIAS:\n                    {\n                        let addressAliasTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractAddressAlias(addressAliasTx);\n                        let addressAliasFormat = tempData;\n                        let infos = [];\n                        let namespaceInfo = {\n                            type: MsgType.NONE,\n                            label: \"Namespace\",\n                            value: addressAliasFormat.aliasName\n                        };\n                        infos.push(namespaceInfo);\n                        let actionInfo = {\n                            type: MsgType.NONE,\n                            label: \"Action\",\n                            value: addressAliasFormat.aliasTypeName\n                        };\n                        infos.push(actionInfo);\n                        let addressInfo = {\n                            type: MsgType.NONE,\n                            label: \"Address\",\n                            value: addressAliasFormat.address\n                        };\n                        infos.push(addressInfo);\n                        transactionDetails = {\n                            signer: addressAliasFormat.signer,\n                            signerAddressPlain: addressAliasFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(addressAliasFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: addressAliasFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_ALIAS:\n                    {\n                        let mosaicAliasTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractAssetAlias(mosaicAliasTx);\n                        let assetAliasFormat = tempData;\n                        let infos = [];\n                        let namespaceInfo = {\n                            type: MsgType.NONE,\n                            label: \"Namespace\",\n                            value: assetAliasFormat.aliasName\n                        };\n                        infos.push(namespaceInfo);\n                        let actionInfo = {\n                            type: MsgType.NONE,\n                            label: \"Action\",\n                            value: assetAliasFormat.aliasTypeName\n                        };\n                        infos.push(actionInfo);\n                        let assetInfo = {\n                            type: MsgType.NONE,\n                            label: \"Asset\",\n                            value: assetAliasFormat.assetId\n                        };\n                        infos.push(assetInfo);\n                        transactionDetails = {\n                            signer: assetAliasFormat.signer,\n                            signerAddressPlain: assetAliasFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(assetAliasFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: assetAliasFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADD_EXCHANGE_OFFER:\n                    {\n                        let addExchangeOfferTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractAddExchangeOffer(addExchangeOfferTx);\n                        let addExchangeOfferFormat = tempData;\n                        let infos = [];\n                        for (let i = 0; i < addExchangeOfferFormat.exchangeOffers.length; ++i) {\n                            let offer = addExchangeOfferFormat.exchangeOffers[i];\n                            let offeringAssetString = `${offer.amount} ${offer.assetId}` + offer.assetNamespace ? ` (${offer.assetNamespace})` : '';\n                            let costString = `${offer.cost} ${_state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.label}`;\n                            let offerInfo = {\n                                type: offer.type === \"Buy\" ? MsgType.GREEN : MsgType.RED,\n                                value: costString + \" - \" + offeringAssetString + `. Duration: ${offer.duration}`\n                            };\n                            infos.push(offerInfo);\n                        }\n                        transactionDetails = {\n                            signer: addExchangeOfferFormat.signer,\n                            signerAddressPlain: addExchangeOfferFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(addExchangeOfferFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.BUY_SELL,\n                            typeName: addExchangeOfferFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].EXCHANGE_OFFER:\n                    {\n                        let exchangeOfferTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractExchangeOffer(exchangeOfferTx);\n                        let exchangeOfferFormat = tempData;\n                        let infos = [];\n                        for (let i = 0; i < exchangeOfferFormat.exchangeOffers.length; ++i) {\n                            let offer = exchangeOfferFormat.exchangeOffers[i];\n                            let offeringAssetString = `${offer.amount} ${offer.assetId}` + offer.assetNamespace ? ` (${offer.assetNamespace})` : '';\n                            let costString = `${offer.cost} ${_state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.label}`;\n                            let ownerPublicAccount = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(offer.owner, _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].networkType);\n                            let owner = _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createAddress(ownerPublicAccount.address.plain()).pretty();\n                            let offerInfo = {\n                                type: offer.type === \"Buy\" ? MsgType.RED : MsgType.GREEN,\n                                value: costString + \" - \" + offeringAssetString + `. From: ${owner}`\n                            };\n                            infos.push(offerInfo);\n                        }\n                        transactionDetails = {\n                            signer: exchangeOfferFormat.signer,\n                            signerAddressPlain: exchangeOfferFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(exchangeOfferFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.BUY_SELL,\n                            typeName: exchangeOfferFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REMOVE_EXCHANGE_OFFER:\n                    {\n                        let removeExchangeOfferTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractRemoveExchangeOffer(removeExchangeOfferTx);\n                        let removeExchangeOfferFormat = tempData;\n                        let infos = [];\n                        for (let i = 0; i < removeExchangeOfferFormat.exchangeOffers.length; ++i) {\n                            let offer = removeExchangeOfferFormat.exchangeOffers[i];\n                            let offeringAssetString = `${offer.assetId}` + offer.assetNamespace ? ` (${offer.assetNamespace})` : '';\n                            let offerInfo = {\n                                type: offer.type === \"Buy\" ? MsgType.GREEN : MsgType.RED,\n                                value: offeringAssetString\n                            };\n                            infos.push(offerInfo);\n                        }\n                        transactionDetails = {\n                            signer: removeExchangeOfferFormat.signer,\n                            signerAddressPlain: removeExchangeOfferFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(removeExchangeOfferFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.BUY_SELL,\n                            typeName: removeExchangeOfferFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_CONFIGURE:\n                    {\n                        let chainConfigureTx = innerTransaction;\n                        tempData = TransactionUtils.extractChainConfig(chainConfigureTx);\n                        let chainConfigFormat = tempData;\n                        let infos = [];\n                        let applyHeightDeltaInfo = {\n                            type: MsgType.NONE,\n                            label: \"Apply after blocks\",\n                            value: chainConfigFormat.applyHeightDelta\n                        };\n                        infos.push(applyHeightDeltaInfo);\n                        transactionDetails = {\n                            signer: chainConfigFormat.signer,\n                            signerAddressPlain: chainConfigFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(chainConfigFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: chainConfigFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_UPGRADE:\n                    {\n                        let chainUpgradeTx = innerTransaction;\n                        tempData = TransactionUtils.extractChainUpgrade(chainUpgradeTx);\n                        let chainUpgradeFormat = tempData;\n                        let infos = [];\n                        let versionInfo = {\n                            type: MsgType.NONE,\n                            label: \"New Version\",\n                            value: chainUpgradeFormat.newVersion\n                        };\n                        infos.push(versionInfo);\n                        let upgradePeriodInfo = {\n                            type: MsgType.NONE,\n                            label: \"Upgrade After Blocks\",\n                            value: chainUpgradeFormat.upgradePeriod\n                        };\n                        infos.push(upgradePeriodInfo);\n                        transactionDetails = {\n                            signer: chainUpgradeFormat.signer,\n                            signerAddressPlain: chainUpgradeFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(chainUpgradeFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: chainUpgradeFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LINK_ACCOUNT:\n                    {\n                        let accountLinkTx = innerTransaction;\n                        tempData = TransactionUtils.extractAccountLink(accountLinkTx);\n                        let accountLinkFormat = tempData;\n                        let infos = [];\n                        let linkInfo = {\n                            type: accountLinkFormat.action === \"Link\" ? MsgType.GREEN : MsgType.RED,\n                            value: accountLinkFormat.remotePublicKey\n                        };\n                        infos.push(linkInfo);\n                        transactionDetails = {\n                            signer: accountLinkFormat.signer,\n                            signerAddressPlain: accountLinkFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(accountLinkFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.ADD_REMOVE,\n                            typeName: accountLinkFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LOCK:\n                    {\n                        let lockFundTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractLockHash(lockFundTx, tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].PARTIAL);\n                        let lockFundFormat = tempData;\n                        let infos = [];\n                        let hashInfo = {\n                            type: MsgType.NONE,\n                            label: \"Hash\",\n                            value: lockFundFormat.lockHash\n                        };\n                        infos.push(hashInfo);\n                        let durationInfo = {\n                            type: MsgType.NONE,\n                            label: \"Action\",\n                            value: lockFundFormat.duration\n                        };\n                        infos.push(durationInfo);\n                        let lockingInfo = {\n                            type: MsgType.NONE,\n                            label: \"Locking Amount\",\n                            value: lockFundFormat.amountLocking + ` ${_state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.label}`\n                        };\n                        infos.push(lockingInfo);\n                        transactionDetails = {\n                            signer: lockFundFormat.signer,\n                            signerAddressPlain: lockFundFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(lockFundFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: lockFundFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_ADDRESS:\n                    {\n                        let accAddressRestrictionTx = innerTransaction;\n                        tempData = TransactionUtils.extractAccAddressRestriction(accAddressRestrictionTx);\n                        let accAddressRestrictionFormat = tempData;\n                        let infos = [];\n                        let actionInfo = {\n                            type: MsgType.NONE,\n                            label: \"Action\",\n                            value: accAddressRestrictionFormat.restrictionTypeOutput\n                        };\n                        infos.push(actionInfo);\n                        for (let i = 0; i < accAddressRestrictionFormat.modification.length; ++i) {\n                            let modification = accAddressRestrictionFormat.modification[i];\n                            let restrictInfo = {\n                                type: modification.action === \"Add\" ? MsgType.GREEN : MsgType.RED,\n                                value: modification.value,\n                                short: _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createAddress(modification.value).pretty()\n                            };\n                            infos.push(restrictInfo);\n                        }\n                        transactionDetails = {\n                            signer: accAddressRestrictionFormat.signer,\n                            signerAddressPlain: accAddressRestrictionFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(accAddressRestrictionFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.ALLOW_BLOCK,\n                            typeName: accAddressRestrictionFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_MOSAIC:\n                    {\n                        let accMosaicModifyTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractAccAssetRestriction(accMosaicModifyTx);\n                        let accAssetRestrictionFormat = tempData;\n                        let infos = [];\n                        let actionInfo = {\n                            type: MsgType.NONE,\n                            label: \"Action\",\n                            value: accAssetRestrictionFormat.restrictionTypeOutput\n                        };\n                        infos.push(actionInfo);\n                        for (let i = 0; i < accAssetRestrictionFormat.modification.length; ++i) {\n                            let modification = accAssetRestrictionFormat.modification[i];\n                            let restrictInfo = {\n                                type: modification.action === \"Add\" ? MsgType.GREEN : MsgType.RED,\n                                value: modification.value + modification.name ? `(${modification.name})` : ''\n                            };\n                            infos.push(restrictInfo);\n                        }\n                        transactionDetails = {\n                            signer: accAssetRestrictionFormat.signer,\n                            signerAddressPlain: accAssetRestrictionFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(accAssetRestrictionFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.ALLOW_BLOCK,\n                            typeName: accAssetRestrictionFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_OPERATION:\n                    {\n                        let accOperationModifyTx = innerTransaction;\n                        tempData = TransactionUtils.extractAccOperationRestriction(accOperationModifyTx);\n                        let accOperationRestrictionFormat = tempData;\n                        let infos = [];\n                        let actionInfo = {\n                            type: MsgType.NONE,\n                            label: \"Action\",\n                            value: accOperationRestrictionFormat.restrictionTypeOutput\n                        };\n                        infos.push(actionInfo);\n                        for (let i = 0; i < accOperationRestrictionFormat.modification.length; ++i) {\n                            let modification = accOperationRestrictionFormat.modification[i];\n                            let restrictInfo = {\n                                type: modification.action === \"Add\" ? MsgType.GREEN : MsgType.RED,\n                                value: modification.value\n                            };\n                            infos.push(restrictInfo);\n                        }\n                        transactionDetails = {\n                            signer: accOperationRestrictionFormat.signer,\n                            signerAddressPlain: accOperationRestrictionFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(accOperationRestrictionFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.ALLOW_BLOCK,\n                            typeName: accOperationRestrictionFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MULTISIG_ACCOUNT:\n                    {\n                        let modifyMultisigAccountTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractModifyMultisig(modifyMultisigAccountTx, tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].PARTIAL);\n                        let modifyMultisigFormat = tempData;\n                        let infos = [];\n                        let approvalChanges;\n                        if (modifyMultisigFormat.approvalDelta === 0) {\n                            approvalChanges = '';\n                        }\n                        else if (modifyMultisigFormat.approvalDelta > 0) {\n                            approvalChanges = ` (+${modifyMultisigFormat.approvalDelta})`;\n                        }\n                        else {\n                            approvalChanges = ` (${modifyMultisigFormat.approvalDelta})`;\n                        }\n                        let minApprovalInfo = {\n                            type: MsgType.NONE,\n                            label: \"Minimum Approval\",\n                            value: modifyMultisigFormat.oldApprovalNumber + approvalChanges\n                        };\n                        infos.push(minApprovalInfo);\n                        let removalChanges;\n                        if (modifyMultisigFormat.removalDelta === 0) {\n                            removalChanges = '';\n                        }\n                        else if (modifyMultisigFormat.removalDelta > 0) {\n                            removalChanges = ` (+${modifyMultisigFormat.removalDelta})`;\n                        }\n                        else {\n                            removalChanges = ` (${modifyMultisigFormat.removalDelta})`;\n                        }\n                        let minRemovalInfo = {\n                            type: MsgType.NONE,\n                            label: \"Minimum Removal\",\n                            value: modifyMultisigFormat.oldRemovalNumber + removalChanges\n                        };\n                        infos.push(minRemovalInfo);\n                        for (let i = 0; i < modifyMultisigFormat.addedCosigner.length; ++i) {\n                            let publicAccount = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(modifyMultisigFormat.addedCosigner[i], _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].networkType);\n                            let tryShortName = _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createAddress(publicAccount.address.plain()).pretty();\n                            let shortName = tryShortName === publicAccount.address.plain() ? '' : tryShortName;\n                            let addCosignerInfo = {\n                                type: MsgType.GREEN,\n                                value: modifyMultisigFormat.addedCosigner[i],\n                                short: shortName\n                            };\n                            infos.push(addCosignerInfo);\n                        }\n                        for (let i = 0; i < modifyMultisigFormat.removedCosigner.length; ++i) {\n                            let publicAccount = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(modifyMultisigFormat.removedCosigner[i], _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].networkType);\n                            let removeCosignerInfo = {\n                                type: MsgType.GREEN,\n                                value: modifyMultisigFormat.removedCosigner[i],\n                                short: _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createAddress(publicAccount.address.plain()).pretty()\n                            };\n                            infos.push(removeCosignerInfo);\n                        }\n                        transactionDetails = {\n                            signer: modifyMultisigFormat.signer,\n                            signerAddressPlain: modifyMultisigFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(modifyMultisigFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.ADD_REMOVE,\n                            typeName: modifyMultisigFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_DEFINITION:\n                    {\n                        let mosaicDefinitionTx = innerTransaction;\n                        tempData = TransactionUtils.extractAssetDefinition(mosaicDefinitionTx);\n                        let assetDefFormat = tempData;\n                        let infos = [];\n                        let assetInfo = {\n                            type: MsgType.NONE,\n                            label: \"Asset\",\n                            value: assetDefFormat.assetId\n                        };\n                        infos.push(assetInfo);\n                        let assetDivisibilityInfo = {\n                            type: MsgType.INFO,\n                            value: `Divisibility: ${assetDefFormat.divisibility}`\n                        };\n                        infos.push(assetDivisibilityInfo);\n                        let assetTransferableInfo = {\n                            type: assetDefFormat.transferable ? MsgType.GREEN : MsgType.RED,\n                            value: `Transferable`\n                        };\n                        infos.push(assetTransferableInfo);\n                        let assetSupplyMutableInfo = {\n                            type: assetDefFormat.supplyMutable ? MsgType.GREEN : MsgType.RED,\n                            value: `Supply Mutable`\n                        };\n                        infos.push(assetSupplyMutableInfo);\n                        if (assetDefFormat.duration) {\n                            let assetDurationInfo = {\n                                type: MsgType.INFO,\n                                label: \"Duration\",\n                                value: assetDefFormat.duration\n                            };\n                            infos.push(assetDurationInfo);\n                        }\n                        transactionDetails = {\n                            signer: assetDefFormat.signer,\n                            signerAddressPlain: assetDefFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(assetDefFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.TRUE_FALSE,\n                            typeName: assetDefFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_SUPPLY_CHANGE:\n                    {\n                        let mosaicSupplyTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractAssetSupplyChange(mosaicSupplyTx);\n                        let assetSupplyFormat = tempData;\n                        let infos = [];\n                        let assetInfo = {\n                            type: MsgType.NONE,\n                            label: \"Asset\",\n                            value: assetSupplyFormat.assetId + assetSupplyFormat.namespaceName ? ` (${assetSupplyFormat.namespaceName})` : ''\n                        };\n                        infos.push(assetInfo);\n                        let assetSupplyInfo = {\n                            type: MsgType.INFO,\n                            label: \"Asset\",\n                            value: assetSupplyFormat.supplyDelta > 0 ? `+${assetSupplyFormat.supplyDelta}` : assetSupplyFormat.supplyDelta\n                        };\n                        infos.push(assetSupplyInfo);\n                        transactionDetails = {\n                            signer: assetSupplyFormat.signer,\n                            signerAddressPlain: assetSupplyFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(assetSupplyFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: assetSupplyFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MOSAIC_LEVY:\n                    {\n                        let assetLevyTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractAssetModifyLevy(assetLevyTx);\n                        let assetLevyFormat = tempData;\n                        let infos = [];\n                        let assetInfo = {\n                            type: MsgType.NONE,\n                            label: \"Asset\",\n                            value: assetLevyFormat.assetId + assetLevyFormat.namespaceName ? ` (${assetLevyFormat.namespaceName})` : ''\n                        };\n                        infos.push(assetInfo);\n                        let levyAssetInfo = {\n                            type: MsgType.NONE,\n                            label: \"Levy Asset\",\n                            value: assetLevyFormat.levyAssetAmount + ' ' + assetLevyFormat.levyAssetId + assetLevyFormat.levyAssetName ? ` (${assetLevyFormat.levyAssetName})` : ''\n                        };\n                        infos.push(levyAssetInfo);\n                        let levyAssetRecipientInfo = {\n                            type: MsgType.NONE,\n                            label: \"Levy Recipient\",\n                            value: assetLevyFormat.levyRecipient,\n                            short: _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createAddress(assetLevyFormat.levyRecipient).pretty()\n                        };\n                        infos.push(levyAssetRecipientInfo);\n                        transactionDetails = {\n                            signer: assetLevyFormat.signer,\n                            signerAddressPlain: assetLevyFormat.signerAddress,\n                            signerAddressPretty: _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createAddress(assetLevyFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: assetLevyFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REMOVE_MOSAIC_LEVY:\n                    {\n                        let assetRemoveLevyTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractAssetRemoveLevy(assetRemoveLevyTx);\n                        let removeAssetLevyFormat = tempData;\n                        let infos = [];\n                        let assetInfo = {\n                            type: MsgType.NONE,\n                            label: \"Asset\",\n                            value: removeAssetLevyFormat.assetId + removeAssetLevyFormat.namespaceName ? ` (${removeAssetLevyFormat.namespaceName})` : ''\n                        };\n                        infos.push(assetInfo);\n                        transactionDetails = {\n                            signer: removeAssetLevyFormat.signer,\n                            signerAddressPlain: removeAssetLevyFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(removeAssetLevyFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: removeAssetLevyFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REGISTER_NAMESPACE:\n                    {\n                        let registerNamespaceTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractRegisterNamespace(registerNamespaceTx);\n                        let registerNamespaceFormat = tempData;\n                        let infos = [];\n                        let typeInfo = {\n                            type: MsgType.NONE,\n                            label: \"Type\",\n                            value: registerNamespaceFormat.registerTypeName + registerNamespaceFormat.isExtend ? ' (Extend)' : ' (Register)'\n                        };\n                        infos.push(typeInfo);\n                        let nameInfo = {\n                            type: MsgType.NONE,\n                            label: \"Name\",\n                            value: registerNamespaceFormat.namespaceName\n                        };\n                        infos.push(nameInfo);\n                        if (registerNamespaceFormat.parentName) {\n                            let parentNameInfo = {\n                                type: MsgType.NONE,\n                                label: \"Parent Name\",\n                                value: registerNamespaceFormat.parentName\n                            };\n                            infos.push(parentNameInfo);\n                        }\n                        if (registerNamespaceFormat.duration) {\n                            let durationInfo = {\n                                type: MsgType.NONE,\n                                label: \"Duration\",\n                                value: registerNamespaceFormat.duration.toString()\n                            };\n                            infos.push(durationInfo);\n                        }\n                        transactionDetails = {\n                            signer: registerNamespaceFormat.signer,\n                            signerAddressPlain: registerNamespaceFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(registerNamespaceFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: registerNamespaceFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_LOCK:\n                    {\n                        let secretLockTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractNonconfirmedSecretLock(secretLockTx, tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].PARTIAL);\n                        let secretLockFormat = tempData;\n                        let infos = [];\n                        let sdas = [];\n                        let sdaString = `${secretLockFormat.amount} ${secretLockFormat.assetId}` + secretLockFormat.namespaceName ? ` (${secretLockFormat.namespaceName})` : '';\n                        sdas.push(sdaString);\n                        let recipientInfo = {\n                            type: MsgType.NONE,\n                            label: \"Recipient\",\n                            value: secretLockFormat.recipient,\n                            short: _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createAddress(secretLockFormat.recipient).pretty()\n                        };\n                        infos.push(recipientInfo);\n                        let hashTypeInfo = {\n                            type: MsgType.NONE,\n                            label: \"Hash Type\",\n                            value: secretLockFormat.hashType\n                        };\n                        infos.push(hashTypeInfo);\n                        let secretInfo = {\n                            type: MsgType.NONE,\n                            label: \"Secret\",\n                            value: secretLockFormat.secret\n                        };\n                        infos.push(secretInfo);\n                        let durationInfo = {\n                            type: MsgType.NONE,\n                            label: \"Duration\",\n                            value: secretLockFormat.duration\n                        };\n                        infos.push(durationInfo);\n                        transactionDetails = {\n                            signer: secretLockFormat.signer,\n                            signerAddressPlain: secretLockFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(secretLockFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: sdas,\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: secretLockFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_PROOF:\n                    {\n                        let secretProofTx = innerTransaction;\n                        tempData = TransactionUtils.extractSecretProof(secretProofTx);\n                        let secretProofFormat = tempData;\n                        let infos = [];\n                        let recipientInfo = {\n                            type: MsgType.NONE,\n                            label: \"Recipient\",\n                            value: secretProofFormat.recipient,\n                            short: _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createAddress(secretProofFormat.recipient).pretty()\n                        };\n                        infos.push(recipientInfo);\n                        let hashTypeInfo = {\n                            type: MsgType.NONE,\n                            label: \"Hash Type\",\n                            value: secretProofFormat.hashType\n                        };\n                        infos.push(hashTypeInfo);\n                        let secretInfo = {\n                            type: MsgType.NONE,\n                            label: \"Secret\",\n                            value: secretProofFormat.secret\n                        };\n                        infos.push(secretInfo);\n                        let proofInfo = {\n                            type: MsgType.NONE,\n                            label: \"Proof\",\n                            value: secretProofFormat.proof\n                        };\n                        infos.push(proofInfo);\n                        transactionDetails = {\n                            signer: secretProofFormat.signer,\n                            signerAddressPlain: secretProofFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(secretProofFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: secretProofFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].TRANSFER:\n                    {\n                        let transferTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractNonconfirmedTransfer(transferTx, tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].PARTIAL);\n                        let transferFormat = tempData;\n                        let sdas = [];\n                        let infos = [];\n                        let shortName = _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createAddress(transferFormat.recipient).pretty();\n                        if (shortName === transferFormat.recipient && transferFormat.recipientNamespaceName) {\n                            shortName = transferFormat.recipientNamespaceName;\n                        }\n                        else if (shortName === transferFormat.recipient) {\n                            shortName = '';\n                        }\n                        let recipientInfo = {\n                            type: MsgType.NONE,\n                            label: \"Recipient\",\n                            value: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(transferFormat.recipient).pretty(),\n                            short: shortName\n                        };\n                        infos.push(recipientInfo);\n                        if (transferFormat.message) {\n                            let msgInfo = {\n                                type: MsgType.NONE,\n                                label: transferFormat.messageTypeTitle,\n                                value: transferFormat.messageType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MessageType\"].EncryptedMessage ? 'xxxxxx' : transferFormat.message,\n                            };\n                            infos.push(msgInfo);\n                        }\n                        if (transferFormat.amountTransfer) {\n                            sdas.push(`${transferFormat.amountTransfer} ${_state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.label}`);\n                        }\n                        for (let i = 0; i < transferFormat.sda.length; ++i) {\n                            let tempSDA = transferFormat.sda[i];\n                            let sdaString = '';\n                            if (tempSDA.currentAlias && tempSDA.currentAlias.length) {\n                                sdaString = (tempSDA.amount + ` ${tempSDA.id} ` + `(${tempSDA.currentAlias[0].name})`);\n                            }\n                            else {\n                                sdaString = (tempSDA.amount + ' ' + tempSDA.id);\n                            }\n                            sdas.push(sdaString);\n                        }\n                        transactionDetails = {\n                            signer: transferFormat.signer,\n                            signerAddressPlain: transferFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(transferFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: sdas,\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: transferFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ACCOUNT_METADATA_V2:\n                    {\n                        let accMetadataTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractAccMetadata(accMetadataTx, tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].PARTIAL);\n                        let accMetadataFormat = tempData;\n                        let infos = [];\n                        let targetPublicAccount = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(accMetadataFormat.targetPublicKey, _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].networkType);\n                        let targetAddress = targetPublicAccount.address.plain();\n                        let accountInfo = {\n                            type: MsgType.NONE,\n                            label: \"Account\",\n                            value: targetPublicAccount.address.plain(),\n                            short: _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createAddress(targetAddress).pretty()\n                        };\n                        infos.push(accountInfo);\n                        let scopedMetadataKeyInfo = {\n                            type: MsgType.NONE,\n                            label: \"Scoped Metadata Key\",\n                            value: accMetadataFormat.scopedMetadataKey\n                        };\n                        infos.push(scopedMetadataKeyInfo);\n                        if (accMetadataFormat.oldValue) {\n                            let oldValueInfo = {\n                                type: MsgType.NONE,\n                                label: \"Current Value\",\n                                value: accMetadataFormat.oldValue\n                            };\n                            infos.push(oldValueInfo);\n                        }\n                        let newValueInfo = {\n                            type: MsgType.NONE,\n                            label: \"New Value\",\n                            value: accMetadataFormat.newValue\n                        };\n                        infos.push(newValueInfo);\n                        transactionDetails = {\n                            signer: accMetadataFormat.signer,\n                            signerAddressPlain: accMetadataFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(accMetadataFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: accMetadataFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].NAMESPACE_METADATA_V2:\n                    {\n                        let nsMetadataTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractNamespaceMetadata(nsMetadataTx, tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].PARTIAL);\n                        let namespaceMetadataFormat = tempData;\n                        let infos = [];\n                        let namespaceInfo = {\n                            type: MsgType.NONE,\n                            label: \"Namespace\",\n                            value: namespaceMetadataFormat.targetIdName ? namespaceMetadataFormat.targetIdName : namespaceMetadataFormat.targetId\n                        };\n                        infos.push(namespaceInfo);\n                        let scopedMetadataKeyInfo = {\n                            type: MsgType.NONE,\n                            label: \"Scoped Metadata Key\",\n                            value: namespaceMetadataFormat.scopedMetadataKey\n                        };\n                        infos.push(scopedMetadataKeyInfo);\n                        if (namespaceMetadataFormat.oldValue) {\n                            let oldValueInfo = {\n                                type: MsgType.NONE,\n                                label: \"Current Value\",\n                                value: namespaceMetadataFormat.oldValue\n                            };\n                            infos.push(oldValueInfo);\n                        }\n                        let newValueInfo = {\n                            type: MsgType.NONE,\n                            label: \"New Value\",\n                            value: namespaceMetadataFormat.newValue\n                        };\n                        infos.push(newValueInfo);\n                        transactionDetails = {\n                            signer: namespaceMetadataFormat.signer,\n                            signerAddressPlain: namespaceMetadataFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(namespaceMetadataFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: namespaceMetadataFormat.type\n                        };\n                    }\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_METADATA_V2:\n                    {\n                        let assetMetadataTx = innerTransaction;\n                        tempData = yield TransactionUtils.extractAssetMetadata(assetMetadataTx, tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].PARTIAL);\n                        let assetMetadataFormat = tempData;\n                        let infos = [];\n                        let namespaceInfo = {\n                            type: MsgType.NONE,\n                            label: \"Asset\",\n                            value: assetMetadataFormat.targetIdName ? assetMetadataFormat.targetIdName : assetMetadataFormat.targetId\n                        };\n                        infos.push(namespaceInfo);\n                        let scopedMetadataKeyInfo = {\n                            type: MsgType.NONE,\n                            label: \"Scoped Metadata Key\",\n                            value: assetMetadataFormat.scopedMetadataKey\n                        };\n                        infos.push(scopedMetadataKeyInfo);\n                        if (assetMetadataFormat.oldValue) {\n                            let oldValueInfo = {\n                                type: MsgType.NONE,\n                                label: \"Current Value\",\n                                value: assetMetadataFormat.oldValue\n                            };\n                            infos.push(oldValueInfo);\n                        }\n                        let newValueInfo = {\n                            type: MsgType.NONE,\n                            label: \"New Value\",\n                            value: assetMetadataFormat.newValue\n                        };\n                        infos.push(newValueInfo);\n                        transactionDetails = {\n                            signer: assetMetadataFormat.signer,\n                            signerAddressPlain: assetMetadataFormat.signerAddress,\n                            signerAddressPretty: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(assetMetadataFormat.signerAddress).pretty(),\n                            infos: infos,\n                            sdas: [],\n                            legendType: InnerTxnLegendType.NONE,\n                            typeName: assetMetadataFormat.type\n                        };\n                    }\n                    break;\n                default:\n                    break;\n            }\n            return transactionDetails;\n        });\n    }\n    // -----------------------------------extract Address Alias only---------------------------------------------------\n    static extractAddressAlias(addressAliasTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerAliasTransaction\"]();\n            txnDetails.signer = addressAliasTxn.signer.publicKey;\n            txnDetails.signerAddress = addressAliasTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(addressAliasTxn.type);\n            txnDetails.address = addressAliasTxn.address.plain();\n            txnDetails.aliasType = addressAliasTxn.actionType;\n            txnDetails.aliasTypeName = addressAliasTxn.actionType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"AliasActionType\"].Link ? \"Link\" : \"Unlink\";\n            let nsId = addressAliasTxn.namespaceId;\n            try {\n                let nsName = yield TransactionUtils.getNamespacesName([nsId]);\n                txnDetails.aliasName = nsName[0].name;\n            }\n            catch (error) {\n            }\n            return txnDetails;\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Asset Alias only---------------------------------------------------\n    static extractAssetAlias(assetAliasTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerAliasTransaction\"]();\n            txnDetails.signer = assetAliasTxn.signer.publicKey;\n            txnDetails.signerAddress = assetAliasTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(assetAliasTxn.type);\n            txnDetails.assetId = assetAliasTxn.mosaicId.toHex();\n            txnDetails.aliasType = assetAliasTxn.actionType;\n            txnDetails.aliasTypeName = assetAliasTxn.actionType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"AliasActionType\"].Link ? \"Link\" : \"Unlink\";\n            let nsId = assetAliasTxn.namespaceId;\n            try {\n                let nsName = yield TransactionUtils.getNamespacesName([nsId]);\n                txnDetails.aliasName = nsName[0].name;\n            }\n            catch (error) {\n            }\n            return txnDetails;\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Add Exchange Offer only---------------------------------------------------\n    static extractAddExchangeOffer(addExchangeOfferTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerExchangeTransaction\"]();\n            txnDetails.signer = addExchangeOfferTxn.signer.publicKey;\n            txnDetails.signerAddress = addExchangeOfferTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(addExchangeOfferTxn.type);\n            for (let i = 0; i < addExchangeOfferTxn.offers.length; ++i) {\n                let tempExchangeOffer = addExchangeOfferTxn.offers[i];\n                let assetId = tempExchangeOffer.mosaicId.toHex();\n                let amount = tempExchangeOffer.mosaicAmount.compact();\n                let newTxnExchangeOffer = {\n                    amount: amount,\n                    amountIsRaw: true,\n                    assetId: assetId,\n                    cost: TransactionUtils.convertToExactNativeAmount(tempExchangeOffer.cost.compact()),\n                    duration: tempExchangeOffer.duration.compact(),\n                    type: tempExchangeOffer.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"ExchangeOfferType\"].SELL_OFFER ? \"Sell\" : \"Buy\",\n                };\n                try {\n                    let assetInfo = yield TransactionUtils.getAssetInfo(assetId);\n                    newTxnExchangeOffer.amountIsRaw = false;\n                    newTxnExchangeOffer.amount = TransactionUtils.convertToExactAmount(amount, assetInfo.divisibility);\n                    let assetName = yield TransactionUtils.getAssetName(assetId);\n                    if (assetName.names.length) {\n                        newTxnExchangeOffer.assetNamespace = assetName.names[0].name;\n                    }\n                }\n                catch (error) {\n                }\n                txnDetails.exchangeOffers.push(newTxnExchangeOffer);\n            }\n            let allBuyOffers = txnDetails.exchangeOffers.filter(x => x.type === \"Buy\");\n            let allSellOffers = txnDetails.exchangeOffers.filter(x => x.type === \"Sell\");\n            txnDetails.exchangeOffers = txnDetails.isTakingOffer ? allSellOffers.concat(allBuyOffers) : allBuyOffers.concat(allSellOffers);\n            return txnDetails;\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Remove Exchange Offer only---------------------------------------------------\n    static extractRemoveExchangeOffer(removeExchangeOfferTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerExchangeTransaction\"]();\n            txnDetails.signer = removeExchangeOfferTxn.signer.publicKey;\n            txnDetails.signerAddress = removeExchangeOfferTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(removeExchangeOfferTxn.type);\n            for (let i = 0; i < removeExchangeOfferTxn.offers.length; ++i) {\n                let tempExchangeOffer = removeExchangeOfferTxn.offers[i];\n                let assetId = tempExchangeOffer.mosaicId.toHex();\n                let newTxnExchangeOffer = {\n                    assetId: assetId,\n                    type: tempExchangeOffer.offerType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"ExchangeOfferType\"].SELL_OFFER ? \"Sell\" : \"Buy\",\n                };\n                try {\n                    let assetName = yield TransactionUtils.getAssetName(assetId);\n                    if (assetName.names.length) {\n                        newTxnExchangeOffer.assetNamespace = assetName.names[0].name;\n                    }\n                }\n                catch (error) { }\n                txnDetails.exchangeOffers.push(newTxnExchangeOffer);\n            }\n            let allBuyOffers = txnDetails.exchangeOffers.filter(x => x.type === \"Buy\");\n            let allSellOffers = txnDetails.exchangeOffers.filter(x => x.type === \"Sell\");\n            txnDetails.exchangeOffers = txnDetails.isTakingOffer ? allSellOffers.concat(allBuyOffers) : allBuyOffers.concat(allSellOffers);\n            return txnDetails;\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Chain Configure only---------------------------------------------------\n    static extractChainConfig(chainConfigureTxn) {\n        let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerChainTransaction\"]();\n        txnDetails.signer = chainConfigureTxn.signer.publicKey;\n        txnDetails.signerAddress = chainConfigureTxn.signer.address.plain();\n        txnDetails.type = TransactionUtils.getTransactionTypeName(chainConfigureTxn.type);\n        txnDetails.applyHeightDelta = chainConfigureTxn.applyHeightDelta.compact();\n        return txnDetails;\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Chain Upgrade only---------------------------------------------------\n    static extractChainUpgrade(chainUpdateTxn) {\n        let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerChainTransaction\"]();\n        txnDetails.signer = chainUpdateTxn.signer.publicKey;\n        txnDetails.signerAddress = chainUpdateTxn.signer.address.plain();\n        txnDetails.type = TransactionUtils.getTransactionTypeName(chainUpdateTxn.type);\n        txnDetails.upgradePeriod = chainUpdateTxn.upgradePeriod.compact();\n        txnDetails.newVersion = chainUpdateTxn.newBlockchainVersion.toHex();\n        return txnDetails;\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Exchange Offer only---------------------------------------------------\n    static extractExchangeOffer(exchangeOfferTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerExchangeTransaction\"]();\n            txnDetails.signer = exchangeOfferTxn.signer.publicKey;\n            txnDetails.signerAddress = exchangeOfferTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(exchangeOfferTxn.type);\n            txnDetails.isTakingOffer = true;\n            for (let i = 0; i < exchangeOfferTxn.offers.length; ++i) {\n                let tempExchangeOffer = exchangeOfferTxn.offers[i];\n                let assetId = tempExchangeOffer.mosaicId.toHex();\n                let amount = tempExchangeOffer.mosaicAmount.compact();\n                let newTxnExchangeOffer = {\n                    amount: amount,\n                    amountIsRaw: true,\n                    assetId: assetId,\n                    cost: TransactionUtils.convertToExactNativeAmount(tempExchangeOffer.cost.compact()),\n                    owner: tempExchangeOffer.owner.publicKey,\n                    type: tempExchangeOffer.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"ExchangeOfferType\"].SELL_OFFER ? \"Sell\" : \"Buy\",\n                };\n                try {\n                    let assetInfo = yield TransactionUtils.getAssetInfo(assetId);\n                    newTxnExchangeOffer.amountIsRaw = false;\n                    newTxnExchangeOffer.amount = TransactionUtils.convertToExactAmount(amount, assetInfo.divisibility);\n                    let assetName = yield TransactionUtils.getAssetName(assetId);\n                    if (assetName.names.length) {\n                        newTxnExchangeOffer.assetNamespace = assetName.names[0].name;\n                    }\n                }\n                catch (error) {\n                }\n                txnDetails.exchangeOffers.push(newTxnExchangeOffer);\n            }\n            let allBuyOffers = txnDetails.exchangeOffers.filter(x => x.type === \"Buy\");\n            let allSellOffers = txnDetails.exchangeOffers.filter(x => x.type === \"Sell\");\n            txnDetails.exchangeOffers = txnDetails.isTakingOffer ? allSellOffers.concat(allBuyOffers) : allBuyOffers.concat(allSellOffers);\n            return txnDetails;\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Account Link only---------------------------------------------------\n    static extractAccountLink(accLinkTxn) {\n        let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerLinkTransaction\"]();\n        txnDetails.signer = accLinkTxn.signer.publicKey;\n        txnDetails.signerAddress = accLinkTxn.signer.address.plain();\n        txnDetails.type = TransactionUtils.getTransactionTypeName(accLinkTxn.type);\n        txnDetails.action = accLinkTxn.linkAction === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"LinkAction\"].Link ? \"Link\" : \"Unlink\";\n        txnDetails.remotePublicKey = accLinkTxn.remoteAccountKey;\n        return txnDetails;\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Account Address Restriction only---------------------------------------------------\n    static extractAccAddressRestriction(accAddressRestrictTxn) {\n        let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerRestrictionTransaction\"]();\n        txnDetails.signer = accAddressRestrictTxn.signer.publicKey;\n        txnDetails.signerAddress = accAddressRestrictTxn.signer.address.plain();\n        txnDetails.type = TransactionUtils.getTransactionTypeName(accAddressRestrictTxn.type);\n        txnDetails.restrictionTypeOutput = TransactionUtils.getRestrictionTypeName(accAddressRestrictTxn.restrictionType).action;\n        for (let i = 0; i < accAddressRestrictTxn.modifications.length; ++i) {\n            let modification = accAddressRestrictTxn.modifications[i];\n            let newRestrictionModification = {\n                action: modification.modificationType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"RestrictionModificationType\"].Add ? \"Add\" : \"Remove\",\n                value: modification.value\n            };\n            txnDetails.modification.push(newRestrictionModification);\n        }\n        let allAddModification = txnDetails.modification.filter(x => x.action === \"Add\");\n        let allRemoveModification = txnDetails.modification.filter(x => x.action === \"Remove\");\n        txnDetails.modification = allAddModification.concat(allRemoveModification);\n        return txnDetails;\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Account Asset Restriction only---------------------------------------------------\n    static extractAccAssetRestriction(accAssetRestrictTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerRestrictionTransaction\"]();\n            txnDetails.signer = accAssetRestrictTxn.signer.publicKey;\n            txnDetails.signerAddress = accAssetRestrictTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(accAssetRestrictTxn.type);\n            txnDetails.restrictionTypeOutput = TransactionUtils.getRestrictionTypeName(accAssetRestrictTxn.restrictionType).action;\n            for (let i = 0; i < accAssetRestrictTxn.modifications.length; ++i) {\n                let modification = accAssetRestrictTxn.modifications[i];\n                let newRestrictionModification = {\n                    action: modification.modificationType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"RestrictionModificationType\"].Add ? \"Add\" : \"Remove\",\n                    value: new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MosaicId\"](modification.value).toHex()\n                };\n                try {\n                    let assetId = newRestrictionModification.value;\n                    if (assetId === _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.assetId) {\n                        newRestrictionModification.name = _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.label;\n                    }\n                    else {\n                        let assetName = yield TransactionUtils.getAssetName(assetId);\n                        if (assetName.names.length) {\n                            newRestrictionModification.name = assetName.names[0].name;\n                        }\n                    }\n                }\n                catch (error) { }\n                txnDetails.modification.push(newRestrictionModification);\n            }\n            let allAddModification = txnDetails.modification.filter(x => x.action === \"Add\");\n            let allRemoveModification = txnDetails.modification.filter(x => x.action === \"Remove\");\n            txnDetails.modification = allAddModification.concat(allRemoveModification);\n            return txnDetails;\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Account Operation Restriction only---------------------------------------------------\n    static extractAccOperationRestriction(accOperationRestrictTxn) {\n        let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerRestrictionTransaction\"]();\n        txnDetails.signer = accOperationRestrictTxn.signer.publicKey;\n        txnDetails.signerAddress = accOperationRestrictTxn.signer.address.plain();\n        txnDetails.type = TransactionUtils.getTransactionTypeName(accOperationRestrictTxn.type);\n        txnDetails.restrictionTypeOutput = TransactionUtils.getRestrictionTypeName(accOperationRestrictTxn.restrictionType).action;\n        for (let i = 0; i < accOperationRestrictTxn.modifications.length; ++i) {\n            let modification = accOperationRestrictTxn.modifications[i];\n            let newRestrictionModification = {\n                action: modification.modificationType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"RestrictionModificationType\"].Add ? \"Add\" : \"Remove\",\n                value: TransactionUtils.getTransactionTypeNameByEnum(modification.value)\n            };\n            txnDetails.modification.push(newRestrictionModification);\n        }\n        let allAddModification = txnDetails.modification.filter(x => x.action === \"Add\");\n        let allRemoveModification = txnDetails.modification.filter(x => x.action === \"Remove\");\n        txnDetails.modification = allAddModification.concat(allRemoveModification);\n        return txnDetails;\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    static extractModifyMultisig(modifyMultisigTxn, txnGroupType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED) {\n                return yield this.extractConfirmedModifyMultisig(modifyMultisigTxn);\n            }\n            else if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].UNCONFIRMED) {\n                return yield this.extractUnconfirmedModifyMultisig(modifyMultisigTxn);\n            }\n            else {\n                return yield this.extractPartialModifyMultisig(modifyMultisigTxn);\n            }\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Asset Definition only---------------------------------------------------\n    static extractAssetDefinition(assetDefTxn) {\n        let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerAssetTransaction\"]();\n        txnDetails.signer = assetDefTxn.signer.publicKey;\n        txnDetails.signerAddress = assetDefTxn.signer.address.plain();\n        txnDetails.type = TransactionUtils.getTransactionTypeName(assetDefTxn.type);\n        txnDetails.assetId = assetDefTxn.mosaicId.toHex();\n        txnDetails.divisibility = assetDefTxn.mosaicProperties.divisibility;\n        txnDetails.duration = assetDefTxn.mosaicProperties.duration ? assetDefTxn.mosaicProperties.duration.compact() : undefined;\n        txnDetails.transferable = assetDefTxn.mosaicProperties.transferable;\n        txnDetails.supplyMutable = assetDefTxn.mosaicProperties.supplyMutable;\n        txnDetails.nonce = assetDefTxn.mosaicNonce.toNumber();\n        return txnDetails;\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Asset Supply Change only---------------------------------------------------\n    static extractAssetSupplyChange(assetSupplyChangeTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerAssetTransaction\"]();\n            txnDetails.signer = assetSupplyChangeTxn.signer.publicKey;\n            txnDetails.signerAddress = assetSupplyChangeTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(assetSupplyChangeTxn.type);\n            let assetId = assetSupplyChangeTxn.mosaicId.toHex();\n            txnDetails.assetId = assetId;\n            txnDetails.supplyDelta = assetSupplyChangeTxn.delta.compact();\n            txnDetails.supplyDeltaIsRaw = true;\n            if (assetSupplyChangeTxn.direction === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MosaicSupplyType\"].Decrease) {\n                txnDetails.supplyDelta = -txnDetails.supplyDelta;\n            }\n            try {\n                let assetInfo = yield TransactionUtils.getAssetInfo(assetId);\n                txnDetails.supplyDelta = TransactionUtils.convertToExactAmount(txnDetails.supplyDelta, assetInfo.divisibility);\n                txnDetails.supplyDeltaIsRaw = false;\n            }\n            catch (error) { }\n            return txnDetails;\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Asset Modify Levy only---------------------------------------------------\n    static extractAssetModifyLevy(assetModifyLevyTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerAssetTransaction\"]();\n            txnDetails.signer = assetModifyLevyTxn.signer.publicKey;\n            txnDetails.signerAddress = assetModifyLevyTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(assetModifyLevyTxn.type);\n            let assetId = assetModifyLevyTxn.mosaicId.toHex();\n            let levyAssetId = assetModifyLevyTxn.mosaicLevy.mosaicId.toHex();\n            let levyAmount = assetModifyLevyTxn.mosaicLevy.fee.compact();\n            txnDetails.assetId = assetId;\n            txnDetails.levyAssetId = levyAssetId;\n            txnDetails.levyAssetAmount = levyAmount;\n            txnDetails.levyAssetAmountIsRaw = true;\n            txnDetails.levyType = assetModifyLevyTxn.mosaicLevy.type;\n            txnDetails.levyRecipient = assetModifyLevyTxn.mosaicLevy.recipient.plain();\n            try {\n                let assetName = yield TransactionUtils.getAssetName(assetId);\n                if (assetName.names.length) {\n                    txnDetails.namespaceName = assetName.names[0].name;\n                }\n                let levyAssetInfo = yield TransactionUtils.getAssetInfo(levyAssetId);\n                txnDetails.levyAssetAmount = TransactionUtils.convertToExactAmount(levyAmount, levyAssetInfo.divisibility);\n                txnDetails.levyAssetAmountIsRaw = false;\n                let levyAssetName = yield TransactionUtils.getAssetName(levyAssetId);\n                if (levyAssetName.names.length) {\n                    txnDetails.levyAssetName = levyAssetName.names[0].name;\n                }\n            }\n            catch (error) { }\n            return txnDetails;\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Asset Remove Levy only---------------------------------------------------\n    static extractAssetRemoveLevy(assetRemoveLevyTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerAssetTransaction\"]();\n            txnDetails.signer = assetRemoveLevyTxn.signer.publicKey;\n            txnDetails.signerAddress = assetRemoveLevyTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(assetRemoveLevyTxn.type);\n            let assetId = assetRemoveLevyTxn.mosaicId.toHex();\n            txnDetails.assetId = assetId;\n            try {\n                let assetName = yield TransactionUtils.getAssetName(assetId);\n                if (assetName.names.length) {\n                    txnDetails.namespaceName = assetName.names[0].name;\n                }\n            }\n            catch (error) { }\n            return txnDetails;\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Register Namespace only---------------------------------------------------\n    static extractRegisterNamespace(registerNSTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerNamespaceTransaction\"]();\n            txnDetails.signer = registerNSTxn.signer.publicKey;\n            txnDetails.signerAddress = registerNSTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(registerNSTxn.type);\n            txnDetails.namespaceName = registerNSTxn.namespaceName;\n            if (registerNSTxn.namespaceType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceType\"].RootNamespace) {\n                txnDetails.duration = registerNSTxn.duration.compact();\n                txnDetails.registerType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceType\"].RootNamespace;\n                txnDetails.registerTypeName = \"Root namespace\";\n                try {\n                    let namespaceInfo = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.namespaceAPI.getNamespace(registerNSTxn.namespaceId);\n                    txnDetails.isExtend = true;\n                }\n                catch (error) { }\n            }\n            else {\n                txnDetails.registerType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceType\"].SubNamespace;\n                txnDetails.registerTypeName = \"Sub namespace\";\n                txnDetails.parentId = registerNSTxn.parentId.toHex();\n                let namespaceName = yield TransactionUtils.getNamespacesName([registerNSTxn.parentId]);\n                txnDetails.parentName = namespaceName[0].name;\n            }\n            txnDetails.namespaceId = registerNSTxn.namespaceId.toHex();\n            return txnDetails;\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Secret Proof only---------------------------------------------------\n    static extractSecretProof(secretProofTxn) {\n        let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerSecretTransaction\"]();\n        txnDetails.signer = secretProofTxn.signer.publicKey;\n        txnDetails.signerAddress = secretProofTxn.signer.address.plain();\n        txnDetails.type = TransactionUtils.getTransactionTypeName(secretProofTxn.type);\n        txnDetails.secret = secretProofTxn.secret;\n        txnDetails.recipient = secretProofTxn.recipient.plain();\n        txnDetails.hashType = _models_const_hashType__WEBPACK_IMPORTED_MODULE_9__[\"HashType\"][secretProofTxn.hashType];\n        txnDetails.proof = secretProofTxn.proof;\n        return txnDetails;\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    static extractNonconfirmedTransfer(transferTxn, txnGroupType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].UNCONFIRMED) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].UNCONFIRMED) {\n                return yield TransactionUtils.extractUnconfirmedTransfer(transferTxn);\n            }\n            else {\n                return yield TransactionUtils.extractPartialTransfer(transferTxn);\n            }\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Account Metadata_v2 only---------------------------------------------------\n    static extractConfirmedAccountMetadata(accMetadataTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerMetadataTransaction\"]();\n            txnDetails.signer = accMetadataTxn.signer.publicKey;\n            txnDetails.signerAddress = accMetadataTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(accMetadataTxn.type);\n            txnDetails.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MetadataType\"].ACCOUNT;\n            txnDetails.metadataTypeName = \"Account\";\n            txnDetails.scopedMetadataKey = accMetadataTxn.scopedMetadataKey.toHex();\n            txnDetails.targetPublicKey = accMetadataTxn.targetPublicKey.publicKey;\n            txnDetails.sizeChanged = accMetadataTxn.valueSizeDelta;\n            return txnDetails;\n        });\n    }\n    static extractUnconfirmedAccountMetadata(accMetadataTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            return yield TransactionUtils.extractPartialAccountMetadata(accMetadataTxn);\n        });\n    }\n    static extractPartialAccountMetadata(accMetadataTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerMetadataTransaction\"]();\n            txnDetails.signer = accMetadataTxn.signer.publicKey;\n            txnDetails.signerAddress = accMetadataTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(accMetadataTxn.type);\n            txnDetails.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MetadataType\"].ACCOUNT;\n            txnDetails.metadataTypeName = \"Account\";\n            txnDetails.scopedMetadataKey = accMetadataTxn.scopedMetadataKey.toHex();\n            txnDetails.targetPublicKey = accMetadataTxn.targetPublicKey.publicKey;\n            txnDetails.sizeChanged = accMetadataTxn.valueSizeDelta;\n            txnDetails.valueChange = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Convert\"].uint8ToHex(accMetadataTxn.valueDifferences);\n            try {\n                let nsMetadataEntry = yield TransactionUtils.getAccountMetadata(accMetadataTxn.targetPublicKey, accMetadataTxn.scopedMetadataKey);\n                if (nsMetadataEntry) {\n                    txnDetails.oldValue = nsMetadataEntry.value;\n                    txnDetails.newValue = TransactionUtils.applyValueChange(txnDetails.oldValue, txnDetails.valueChange, txnDetails.sizeChanged);\n                }\n            }\n            catch (error) { }\n            return txnDetails;\n        });\n    }\n    static extractAccMetadata(accMetadataTxn, txnGroupType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED) {\n                return yield this.extractConfirmedAccountMetadata(accMetadataTxn);\n            }\n            else if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].UNCONFIRMED) {\n                return yield this.extractUnconfirmedAccountMetadata(accMetadataTxn);\n            }\n            else {\n                return yield this.extractPartialAccountMetadata(accMetadataTxn);\n            }\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Namespace Metadata_v2 only--------------------------------------------------- \n    static extractConfirmedNamespaceMetadata(nsMetadataTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerMetadataTransaction\"]();\n            txnDetails.signer = nsMetadataTxn.signer.publicKey;\n            txnDetails.signerAddress = nsMetadataTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(nsMetadataTxn.type);\n            let nsId = nsMetadataTxn.targetNamespaceId.toHex();\n            txnDetails.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MetadataType\"].NAMESPACE;\n            txnDetails.metadataTypeName = \"Namespace\";\n            txnDetails.scopedMetadataKey = nsMetadataTxn.scopedMetadataKey.toHex();\n            txnDetails.targetId = nsId;\n            txnDetails.targetPublicKey = nsMetadataTxn.targetPublicKey.publicKey;\n            txnDetails.sizeChanged = nsMetadataTxn.valueSizeDelta;\n            try {\n                let nsName = yield TransactionUtils.getNamespacesName([tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceId\"].createFromEncoded(nsId)]);\n                if (nsName.length) {\n                    txnDetails.targetIdName = nsName[0].name;\n                }\n            }\n            catch (error) { }\n            return txnDetails;\n        });\n    }\n    static extractUnconfirmedNamespaceMetadata(nsMetadataTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            return yield TransactionUtils.extractPartialNamespaceMetadata(nsMetadataTxn);\n        });\n    }\n    static extractPartialNamespaceMetadata(nsMetadataTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerMetadataTransaction\"]();\n            txnDetails.signer = nsMetadataTxn.signer.publicKey;\n            txnDetails.signerAddress = nsMetadataTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(nsMetadataTxn.type);\n            let nsId = nsMetadataTxn.targetNamespaceId.toHex();\n            txnDetails.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MetadataType\"].NAMESPACE;\n            txnDetails.metadataTypeName = \"Namespace\";\n            txnDetails.scopedMetadataKey = nsMetadataTxn.scopedMetadataKey.toHex();\n            txnDetails.targetId = nsId;\n            txnDetails.targetPublicKey = nsMetadataTxn.targetPublicKey.publicKey;\n            txnDetails.sizeChanged = nsMetadataTxn.valueSizeDelta;\n            txnDetails.valueChange = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Convert\"].uint8ToHex(nsMetadataTxn.valueDifferences);\n            try {\n                let nsName = yield TransactionUtils.getNamespacesName([tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceId\"].createFromEncoded(nsId)]);\n                if (nsName.length) {\n                    txnDetails.targetIdName = nsName[0].name;\n                }\n                let nsMetadataEntry = yield TransactionUtils.getNamespaceMetadata(nsMetadataTxn.targetNamespaceId, nsMetadataTxn.scopedMetadataKey);\n                if (nsMetadataEntry) {\n                    txnDetails.oldValue = nsMetadataEntry.value;\n                    txnDetails.newValue = TransactionUtils.applyValueChange(txnDetails.oldValue, txnDetails.valueChange, txnDetails.sizeChanged);\n                }\n            }\n            catch (error) { }\n            return txnDetails;\n        });\n    }\n    static extractNamespaceMetadata(nsMetadataTxn, txnGroupType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED) {\n                return yield this.extractConfirmedNamespaceMetadata(nsMetadataTxn);\n            }\n            else if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].UNCONFIRMED) {\n                return yield TransactionUtils.extractUnconfirmedNamespaceMetadata(nsMetadataTxn);\n            }\n            else {\n                return yield TransactionUtils.extractPartialNamespaceMetadata(nsMetadataTxn);\n            }\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Asset Metadata_v2 only---------------------------------------------------\n    static extractConfirmedAssetMetadata(assetMetadataTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerMetadataTransaction\"]();\n            txnDetails.signer = assetMetadataTxn.signer.publicKey;\n            txnDetails.signerAddress = assetMetadataTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(assetMetadataTxn.type);\n            let assetId = assetMetadataTxn.targetMosaicId.toHex();\n            txnDetails.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MetadataType\"].MOSAIC;\n            txnDetails.metadataTypeName = \"Asset\";\n            txnDetails.scopedMetadataKey = assetMetadataTxn.scopedMetadataKey.toHex();\n            txnDetails.targetId = assetId;\n            txnDetails.targetPublicKey = assetMetadataTxn.targetPublicKey.publicKey;\n            txnDetails.sizeChanged = assetMetadataTxn.valueSizeDelta;\n            try {\n                let assetName = yield TransactionUtils.getAssetName(assetId);\n                if (assetName.names.length) {\n                    txnDetails.targetIdName = assetName.names[0].name;\n                }\n            }\n            catch (error) { }\n            return txnDetails;\n        });\n    }\n    static extractUnconfirmedAssetMetadata(assetMetadataTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            return yield TransactionUtils.extractPartialAssetMetadata(assetMetadataTxn);\n        });\n    }\n    static extractPartialAssetMetadata(assetMetadataTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerMetadataTransaction\"]();\n            txnDetails.signer = assetMetadataTxn.signer.publicKey;\n            txnDetails.signerAddress = assetMetadataTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(assetMetadataTxn.type);\n            let assetId = assetMetadataTxn.targetMosaicId.toHex();\n            txnDetails.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MetadataType\"].MOSAIC;\n            txnDetails.metadataTypeName = \"Asset\";\n            txnDetails.scopedMetadataKey = assetMetadataTxn.scopedMetadataKey.toHex();\n            txnDetails.targetId = assetId;\n            txnDetails.targetPublicKey = assetMetadataTxn.targetPublicKey.publicKey;\n            txnDetails.sizeChanged = assetMetadataTxn.valueSizeDelta;\n            txnDetails.valueChange = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Convert\"].uint8ToHex(assetMetadataTxn.valueDifferences);\n            try {\n                let assetName = yield TransactionUtils.getAssetName(assetId);\n                if (assetName.names.length) {\n                    txnDetails.targetIdName = assetName.names[0].name;\n                }\n                let assetMetadataEntry = yield TransactionUtils.getAssetMetadata(assetMetadataTxn.targetMosaicId, assetMetadataTxn.scopedMetadataKey);\n                if (assetMetadataEntry) {\n                    txnDetails.oldValue = assetMetadataEntry.value;\n                    txnDetails.newValue = TransactionUtils.applyValueChange(txnDetails.oldValue, txnDetails.valueChange, txnDetails.sizeChanged);\n                }\n            }\n            catch (error) { }\n            return txnDetails;\n        });\n    }\n    static extractAssetMetadata(assetMetadataTxn, txnGroupType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED) {\n                return yield TransactionUtils.extractConfirmedAssetMetadata(assetMetadataTxn);\n            }\n            else if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].UNCONFIRMED) {\n                return yield TransactionUtils.extractUnconfirmedAssetMetadata(assetMetadataTxn);\n            }\n            else {\n                return yield TransactionUtils.extractPartialAssetMetadata(assetMetadataTxn);\n            }\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Lock Hash only--------------------------------------------------- \n    static extractConfirmedLockHash(lockFundTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerLockTransaction\"]();\n            txnDetails.signer = lockFundTxn.signer.publicKey;\n            txnDetails.signerAddress = lockFundTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(lockFundTxn.type);\n            txnDetails.lockHash = lockFundTxn.hash;\n            txnDetails.duration = lockFundTxn.duration.compact();\n            let amount = lockFundTxn.mosaic.amount.compact();\n            txnDetails.amountLocking = _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.divisibility ? amount / Math.pow(10, _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.divisibility) : amount;\n            try {\n                let txnStatus = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.transactionAPI.getTransactionStatus(lockFundTxn.hash);\n                txnDetails.isRefunded = txnStatus.group === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED;\n            }\n            catch (error) {\n                txnDetails.isRefunded = false;\n            }\n            return txnDetails;\n        });\n    }\n    static extractUnconfirmedLockHash(lockFundTxn) {\n        return TransactionUtils.extractPartialLockHash(lockFundTxn);\n    }\n    static extractPartialLockHash(lockFundTxn) {\n        let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerLockTransaction\"]();\n        txnDetails.signer = lockFundTxn.signer.publicKey;\n        txnDetails.signerAddress = lockFundTxn.signer.address.plain();\n        txnDetails.type = TransactionUtils.getTransactionTypeName(lockFundTxn.type);\n        txnDetails.lockHash = lockFundTxn.hash;\n        txnDetails.duration = lockFundTxn.duration.compact();\n        let amount = lockFundTxn.mosaic.amount.compact();\n        txnDetails.amountLocking = _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.divisibility ? amount / Math.pow(10, _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.divisibility) : amount;\n        return txnDetails;\n    }\n    static extractLockHash(lockFundTxn, txnGroupType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED) {\n                return yield TransactionUtils.extractConfirmedLockHash(lockFundTxn);\n            }\n            if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].UNCONFIRMED) {\n                return TransactionUtils.extractUnconfirmedLockHash(lockFundTxn);\n            }\n            else {\n                return TransactionUtils.extractPartialLockHash(lockFundTxn);\n            }\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    static getRestrictionTypeName(restrictionType) {\n        let restrictionTypeName = {\n            action: '',\n            type: ''\n        };\n        switch (restrictionType) {\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"RestrictionType\"].AllowAddress:\n                restrictionTypeName.action = \"Allow\";\n                restrictionTypeName.type = \"Address\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"RestrictionType\"].BlockAddress:\n                restrictionTypeName.action = \"Block\";\n                restrictionTypeName.type = \"Address\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"RestrictionType\"].AllowMosaic:\n                restrictionTypeName.action = \"Allow\";\n                restrictionTypeName.type = \"SDA\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"RestrictionType\"].BlockMosaic:\n                restrictionTypeName.action = \"Block\";\n                restrictionTypeName.type = \"SDA\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"RestrictionType\"].AllowTransaction:\n                restrictionTypeName.action = \"Allow\";\n                restrictionTypeName.type = \"Transaction Type\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"RestrictionType\"].BlockTransaction:\n                restrictionTypeName.action = \"Block\";\n                restrictionTypeName.type = \"Transaction Type\";\n                break;\n            default:\n                break;\n        }\n        return restrictionTypeName;\n    }\n    // -----------------------------------extract Modify Multisig only--------------------------------------------------- \n    static extractConfirmedModifyMultisig(modifyMultisigTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerAccountTransaction\"]();\n            txnDetails.signer = modifyMultisigTxn.signer.publicKey;\n            txnDetails.signerAddress = modifyMultisigTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(modifyMultisigTxn.type);\n            txnDetails.approvalDelta = modifyMultisigTxn.minApprovalDelta;\n            txnDetails.removalDelta = modifyMultisigTxn.minRemovalDelta;\n            txnDetails.addedCosigner = modifyMultisigTxn.modifications.filter(x => x.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MultisigCosignatoryModificationType\"].Add)\n                .map(x => x.cosignatoryPublicAccount.publicKey);\n            txnDetails.removedCosigner = modifyMultisigTxn.modifications.filter(x => x.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MultisigCosignatoryModificationType\"].Remove)\n                .map(x => x.cosignatoryPublicAccount.publicKey);\n            return txnDetails;\n        });\n    }\n    static extractUnconfirmedModifyMultisig(modifyMultisigTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            return yield TransactionUtils.extractPartialModifyMultisig(modifyMultisigTxn);\n        });\n    }\n    static extractPartialModifyMultisig(modifyMultisigTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerAccountTransaction\"]();\n            txnDetails.signer = modifyMultisigTxn.signer.publicKey;\n            txnDetails.signerAddress = modifyMultisigTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(modifyMultisigTxn.type);\n            txnDetails.approvalDelta = modifyMultisigTxn.minApprovalDelta;\n            txnDetails.removalDelta = modifyMultisigTxn.minRemovalDelta;\n            txnDetails.addedCosigner = modifyMultisigTxn.modifications.filter(x => x.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MultisigCosignatoryModificationType\"].Add)\n                .map(x => x.cosignatoryPublicAccount.publicKey);\n            txnDetails.removedCosigner = modifyMultisigTxn.modifications.filter(x => x.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MultisigCosignatoryModificationType\"].Remove)\n                .map(x => x.cosignatoryPublicAccount.publicKey);\n            try {\n                let multisigInfo = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.accountAPI.getMultisigAccountInfo(modifyMultisigTxn.signer.address);\n                if (multisigInfo) {\n                    txnDetails.oldApprovalNumber = multisigInfo.minApproval;\n                    txnDetails.oldRemovalNumber = multisigInfo.minRemoval;\n                }\n            }\n            catch (error) {\n                txnDetails.oldApprovalNumber = 0;\n                txnDetails.oldRemovalNumber = 0;\n            }\n            return txnDetails;\n        });\n    }\n    extractModifyMultisig(modifyMultisigTxn, txnGroupType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED) {\n                return yield TransactionUtils.extractConfirmedModifyMultisig(modifyMultisigTxn);\n            }\n            else if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].UNCONFIRMED) {\n                return yield TransactionUtils.extractUnconfirmedModifyMultisig(modifyMultisigTxn);\n            }\n            else {\n                return yield TransactionUtils.extractPartialModifyMultisig(modifyMultisigTxn);\n            }\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    // -----------------------------------extract Secret Lock only--------------------------------------------------- \n    static extractConfirmedSecretLock(secretLockTxn, blockNum) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerSecretTransaction\"]();\n            txnDetails.signer = secretLockTxn.signer.publicKey;\n            txnDetails.signerAddress = secretLockTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(secretLockTxn.type);\n            txnDetails.duration = secretLockTxn.duration.compact();\n            txnDetails.secret = secretLockTxn.secret;\n            txnDetails.recipient = secretLockTxn.recipient.plain();\n            txnDetails.amount = secretLockTxn.mosaic.amount.compact();\n            txnDetails.hashType = _models_const_hashType__WEBPACK_IMPORTED_MODULE_9__[\"HashType\"][secretLockTxn.hashType];\n            let isNamespace = TransactionUtils.isNamespace(secretLockTxn.mosaic.id);\n            let resolvedAssetId = yield TransactionUtils.getResolvedAsset(secretLockTxn.mosaic.id, blockNum);\n            txnDetails.assetId = resolvedAssetId.toHex();\n            try {\n                if (!isNamespace) {\n                    let assetsNames = yield TransactionUtils.getAssetsName([secretLockTxn.mosaic.id]);\n                    if (assetsNames[0].names.length) {\n                        txnDetails.namespaceName = assetsNames[0].names[0].name;\n                    }\n                }\n                else {\n                    txnDetails.isSendWithNamespace = true;\n                    let namespaceId = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceId\"](secretLockTxn.mosaic.id.toDTO().id);\n                    let nsNames = yield TransactionUtils.getNamespacesName([namespaceId]);\n                    txnDetails.namespaceName = nsNames[0].name;\n                }\n                if (txnDetails.namespaceName && txnDetails.namespaceName === _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.fullNamespace) {\n                    txnDetails.namespaceName = _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.label;\n                }\n                let assetInfo = yield TransactionUtils.getAssetInfo(txnDetails.assetId);\n                if (assetInfo.divisibility > 0) {\n                    txnDetails.amount = TransactionUtils.convertToExactAmount(txnDetails.amount, assetInfo.divisibility);\n                }\n                txnDetails.amountIsRaw = false;\n            }\n            catch (error) { }\n            return txnDetails;\n        });\n    }\n    static extractUnconfirmedSecretLock(secretLockTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            return TransactionUtils.extractPartialSecretLock(secretLockTxn);\n        });\n    }\n    static extractPartialSecretLock(secretLockTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerSecretTransaction\"]();\n            txnDetails.signer = secretLockTxn.signer.publicKey;\n            txnDetails.signerAddress = secretLockTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(secretLockTxn.type);\n            txnDetails.duration = secretLockTxn.duration.compact();\n            txnDetails.secret = secretLockTxn.secret;\n            txnDetails.recipient = secretLockTxn.recipient.plain();\n            txnDetails.amount = secretLockTxn.mosaic.amount.compact();\n            txnDetails.hashType = _models_const_hashType__WEBPACK_IMPORTED_MODULE_9__[\"HashType\"][secretLockTxn.hashType];\n            let isNamespace = TransactionUtils.isNamespace(secretLockTxn.mosaic.id);\n            try {\n                if (!isNamespace) {\n                    txnDetails.assetId = secretLockTxn.mosaic.id.toHex();\n                    let assetsNames = yield TransactionUtils.getAssetsName([secretLockTxn.mosaic.id]);\n                    if (assetsNames[0].names.length) {\n                        txnDetails.namespaceName = assetsNames[0].names[0].name;\n                    }\n                }\n                else {\n                    let namespaceId = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceId\"](secretLockTxn.mosaic.id.toDTO().id);\n                    let linkedAssetId = yield TransactionUtils.getAssetAlias(namespaceId);\n                    txnDetails.assetId = linkedAssetId.toHex();\n                    txnDetails.isSendWithNamespace = true;\n                    let nsNames = yield TransactionUtils.getNamespacesName([namespaceId]);\n                    txnDetails.namespaceName = nsNames[0].name;\n                }\n                if (txnDetails.namespaceName && txnDetails.namespaceName === _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.fullNamespace) {\n                    txnDetails.namespaceName = _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.label;\n                }\n                let assetInfo = yield TransactionUtils.getAssetInfo(txnDetails.assetId);\n                if (assetInfo.divisibility > 0) {\n                    txnDetails.amount = TransactionUtils.convertToExactAmount(txnDetails.amount, assetInfo.divisibility);\n                }\n                txnDetails.amountIsRaw = false;\n            }\n            catch (error) { }\n            return txnDetails;\n        });\n    }\n    static extractNonconfirmedSecretLock(secretLockTxn, txnGroupType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].UNCONFIRMED) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            if (txnGroupType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].UNCONFIRMED) {\n                return yield TransactionUtils.extractUnconfirmedSecretLock(secretLockTxn);\n            }\n            else {\n                return yield TransactionUtils.extractPartialSecretLock(secretLockTxn);\n            }\n        });\n    }\n    // --------------------------------------end------------------------------------------------------------------\n    static extractUnconfirmedTransfer(transferTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = yield TransactionUtils.extractPartialTransfer(transferTxn);\n            if (txnDetails.messageType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MessageType\"].PlainMessage) {\n                let newType = TransactionUtils.convertToSwapType(txnDetails.message);\n                if (newType) {\n                    txnDetails.type = newType;\n                }\n            }\n            return txnDetails;\n        });\n    }\n    static extractPartialTransfer(transferTxn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let txnDetails = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"InnerTransferTransaction\"]();\n            txnDetails.signer = transferTxn.signer.publicKey;\n            txnDetails.signerAddress = transferTxn.signer.address.plain();\n            txnDetails.type = TransactionUtils.getTransactionTypeName(transferTxn.type);\n            let sdas = [];\n            txnDetails.message = transferTxn.message.payload;\n            txnDetails.messageType = transferTxn.message.type;\n            switch (txnDetails.messageType) {\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MessageType\"].PlainMessage:\n                    txnDetails.messageTypeTitle = \"Plain Message\";\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MessageType\"].EncryptedMessage:\n                    txnDetails.messageTypeTitle = \"Encrypted Message\";\n                    break;\n                case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MessageType\"].HexadecimalMessage:\n                    txnDetails.messageTypeTitle = \"Hexadecimal Message\";\n                    break;\n            }\n            let recipientIsNamespace = transferTxn.recipient instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceId\"] ? true : false;\n            let recipient;\n            if (transferTxn.recipient instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceId\"]) {\n                txnDetails.recipientNamespaceId = transferTxn.recipient.toHex();\n                recipient = yield TransactionUtils.getAddressAlias(transferTxn.recipient);\n                let namespacesName = yield TransactionUtils.getNamespacesName([transferTxn.recipient]);\n                txnDetails.recipientNamespaceName = namespacesName[0].name;\n            }\n            else {\n                recipient = transferTxn.recipient;\n            }\n            txnDetails.recipient = recipient.plain();\n            txnDetails.sender = transferTxn.signer.address.plain();\n            // txnDetails.in_out = this.selectedAccount.address === txnDetails.sender ? false: true;\n            txnDetails.in_out = false;\n            for (let y = 0; y < transferTxn.mosaics.length; ++y) {\n                let rawAmount = transferTxn.mosaics[y].amount.compact();\n                let actualAmount = rawAmount;\n                let assetId;\n                let isSendWithNamespace = TransactionUtils.isNamespace(transferTxn.mosaics[y].id);\n                if (isSendWithNamespace) {\n                    let namespaceId = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceId\"](transferTxn.mosaics[y].id.toDTO().id);\n                    assetId = yield TransactionUtils.getAssetAlias(namespaceId);\n                }\n                else {\n                    assetId = transferTxn.mosaics[y].id;\n                }\n                let assetIdHex = assetId.toHex();\n                if ([_state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.assetId, nativeTokenNamespaceId.value].includes(assetIdHex)) {\n                    txnDetails.amountTransfer = TransactionUtils.convertToExactNativeAmount(actualAmount);\n                    continue;\n                }\n                let newSDA = {\n                    amount: rawAmount,\n                    divisibility: 0,\n                    id: assetIdHex,\n                    amountIsRaw: true,\n                    sendWithNamespace: isSendWithNamespace\n                };\n                if (isSendWithNamespace) {\n                    let namespaceId = transferTxn.mosaics[y].id;\n                    newSDA.sendWithAlias = {\n                        idHex: namespaceId.toHex(),\n                        id: namespaceId.toDTO().id\n                    };\n                }\n                sdas.push(newSDA);\n            }\n            let namespaceIds = sdas.filter(sda => sda.sendWithNamespace).map(sda => _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createNamespaceId(sda.sendWithAlias.id));\n            let allAssetId = sdas.filter(sda => {\n                return sda.amountIsRaw;\n            }).map(sda => _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createAssetId(sda.id));\n            if (namespaceIds.length || allAssetId.length) {\n                let namespacesNames = [];\n                namespacesNames = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.namespaceAPI.getNamespacesName(namespaceIds);\n                let assetsProperties = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.assetAPI.getMosaics(allAssetId);\n                let aliasNames = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.assetAPI.getMosaicsNames(allAssetId);\n                for (let x = 0; x < sdas.length; ++x) {\n                    let assetProperties = assetsProperties.filter(aliasName => aliasName.mosaicId.toHex() === sdas[x].id)[0];\n                    sdas[x].divisibility = assetProperties.divisibility;\n                    sdas[x].amount = TransactionUtils.convertToExactAmount(sdas[x].amount, assetProperties.divisibility);\n                    sdas[x].amountIsRaw = false;\n                    let mosaicNames = aliasNames.filter(aliaName => aliaName.mosaicId.toHex() === sdas[x].id)[0];\n                    let currentAliasNames = mosaicNames.names;\n                    sdas[x].currentAlias = currentAliasNames.map(currentAlias => {\n                        return { name: currentAlias.name, id: currentAlias.namespaceId.toDTO().id, idHex: currentAlias.namespaceId.toHex() };\n                    });\n                    if (sdas[x].sendWithAlias) {\n                        sdas[x].sendWithAlias.name = namespacesNames\n                            .filter(nsName => nsName.namespaceId.toHex() === sdas[x].sendWithAlias.idHex)\n                            .map(nsName => nsName.name)[0];\n                    }\n                }\n            }\n            txnDetails.sda = sdas;\n            return txnDetails;\n        });\n    }\n    static autoFindAggregateTransaction(hash) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let statusGroup = \"\";\n            let txn = null;\n            while (txn === null && statusGroup !== \"confirmed\" && statusGroup !== \"error\") {\n                try {\n                    let txnStatus = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.transactionAPI.getTransactionStatus(hash);\n                    statusGroup = txnStatus.group;\n                    switch (statusGroup) {\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].CONFIRMED:\n                            try {\n                                txn = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.transactionAPI.getTransaction(hash);\n                            }\n                            catch (error) {\n                                statusGroup = \"error\";\n                            }\n                            break;\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].UNCONFIRMED:\n                            try {\n                                txn = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.transactionAPI.getUnconfirmedTransaction(hash);\n                            }\n                            catch (error) { }\n                            break;\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionGroupType\"].PARTIAL:\n                            try {\n                                txn = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.transactionAPI.getPartialTransaction(hash);\n                            }\n                            catch (error) { }\n                            break;\n                        default:\n                            statusGroup = \"error\";\n                            break;\n                    }\n                }\n                catch (error) {\n                    statusGroup = \"error\";\n                }\n            }\n            if (statusGroup === \"error\" || txn === null) {\n                return null;\n            }\n            else {\n                let aggregateTxn = txn;\n                return aggregateTxn;\n            }\n        });\n    }\n    static searchTxns(transactionGroupType, transactionQueryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactionSearchResult = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.transactionAPI.searchTransactions(transactionGroupType, transactionQueryParams);\n            return transactionSearchResult;\n        });\n    }\n    static accountTxns(publicKey, transactionQueryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            console.log(publicKey);\n            let publicAccount = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(publicKey, _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].networkType);\n            let transactionSearchResult = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.accountAPI.transactions(publicAccount, transactionQueryParams);\n            console.log(transactionSearchResult);\n            return transactionSearchResult;\n        });\n    }\n    static formatConfirmedTransaction(txn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactionInfo = txn.transactionInfo;\n            let txnHash = transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"AggregateTransactionInfo\"] ?\n                transactionInfo.aggregateHash : transactionInfo.hash;\n            let blockHeight = 0;\n            let txnBytes = 0;\n            let deadline = null;\n            if (transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"AggregateTransactionInfo\"]) {\n                //let aggregateTxn = await this.autoFindAggregateTransaction(txnHash);\n                blockHeight = transactionInfo.height.compact();\n                //txnBytes = aggregateTxn.serialize().length / 2;\n                //deadline = aggregateTxn.deadline.adjustedValue.compact();\n            }\n            else if (txn.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_BONDED || txn.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_COMPLETE) {\n                let aggregateTxn = yield this.autoFindAggregateTransaction(txnHash);\n                blockHeight = aggregateTxn.transactionInfo.height.compact();\n                txnBytes = aggregateTxn.serialize().length / 2;\n                deadline = aggregateTxn.deadline.adjustedValue.compact();\n            }\n            else {\n                blockHeight = transactionInfo.height.compact();\n                // wait SDK to fix\n                try {\n                    txnBytes = txn.serialize().length / 2;\n                }\n                catch (error) {\n                    console.log(error);\n                }\n                deadline = txn.deadline.adjustedValue.compact();\n            }\n            let blockInfo = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.blockAPI.getBlockByHeight(blockHeight);\n            let fee = txnBytes * blockInfo.feeMultiplier;\n            let formattedTxn = new _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"ConfirmedTransaction\"](txnHash);\n            formattedTxn.block = blockHeight;\n            formattedTxn.deadline = deadline;\n            formattedTxn.type = TransactionUtils.getTransactionTypeName(txn.type);\n            formattedTxn.maxFee = transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"AggregateTransactionInfo\"] ?\n                null : TransactionUtils.convertToExactNativeAmount(txn.maxFee.compact());\n            formattedTxn.signer = txn.signer.publicKey;\n            formattedTxn.signerAddress = txn.signer.address.plain();\n            formattedTxn.fee = TransactionUtils.convertToExactNativeAmount(fee);\n            if (transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"AggregateTransactionInfo\"]) {\n                formattedTxn.fee = null;\n            }\n            formattedTxn.timestamp = new Date(blockInfo.timestamp.compact() + tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Deadline\"].timestampNemesisBlock * 1000).toISOString();\n            return formattedTxn;\n        });\n    }\n    static formatConfirmedMixedTxns(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield TransactionUtils.formatConfirmedTransaction(txns[i]);\n                let txn = _models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"ConfirmedTransaction\"].convertToSubClass(_models_transactions_transaction__WEBPACK_IMPORTED_MODULE_8__[\"ConfirmedTransferTransaction\"], formattedTxn);\n                let sdas = [];\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].TRANSFER) {\n                    let transferTxn = txns[i];\n                    txn.message = transferTxn.message.payload;\n                    txn.messageType = transferTxn.message.type;\n                    if (txn.messageType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MessageType\"].PlainMessage) {\n                        let newType = TransactionUtils.convertToSwapType(txn.message);\n                        if (newType) {\n                            txn.type = newType;\n                        }\n                    }\n                    switch (txn.messageType) {\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MessageType\"].PlainMessage:\n                            txn.messageTypeTitle = \"Plain Message\";\n                            break;\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MessageType\"].EncryptedMessage:\n                            txn.messageTypeTitle = \"Encrypted Message\";\n                            break;\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MessageType\"].HexadecimalMessage:\n                            txn.messageTypeTitle = \"Hexadecimal Message\";\n                            break;\n                    }\n                    let recipientIsNamespace = transferTxn.recipient instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceId\"] ? true : false;\n                    if (transferTxn.recipient instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceId\"]) {\n                        txn.recipientNamespaceId = transferTxn.recipient.toHex();\n                        let namespacesName = yield TransactionUtils.getNamespacesName([transferTxn.recipient]);\n                        txn.recipientNamespaceName = namespacesName[0].name;\n                    }\n                    let recipient = yield TransactionUtils.getRecipient(transferTxn, txn.block);\n                    txn.recipient = recipient.plain();\n                    txn.sender = transferTxn.signer.address.plain();\n                    txn.in_out = false;\n                    for (let y = 0; y < transferTxn.mosaics.length; ++y) {\n                        let rawAmount = transferTxn.mosaics[y].amount.compact();\n                        let actualAmount = rawAmount;\n                        let isSendWithNamespace = TransactionUtils.isNamespace(transferTxn.mosaics[y].id);\n                        let assetId = yield TransactionUtils.getResolvedAsset(transferTxn.mosaics[y].id, txn.block);\n                        let assetIdHex = assetId.toHex();\n                        if ([_state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].nativeToken.assetId, nativeTokenNamespaceId.value].includes(assetIdHex)) {\n                            txn.amountTransfer += TransactionUtils.convertToExactNativeAmount(actualAmount);\n                            continue;\n                        }\n                        let newSDA = {\n                            amount: rawAmount,\n                            divisibility: 0,\n                            id: assetIdHex,\n                            amountIsRaw: true,\n                            sendWithNamespace: isSendWithNamespace\n                        };\n                        if (isSendWithNamespace) {\n                            let namespaceId = transferTxn.mosaics[y].id;\n                            newSDA.sendWithAlias = {\n                                idHex: namespaceId.toHex(),\n                                id: namespaceId.toDTO().id\n                            };\n                        }\n                        sdas.push(newSDA);\n                    }\n                    let namespaceIds = sdas.filter(sda => sda.sendWithNamespace).map(sda => _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createNamespaceId(sda.sendWithAlias.id));\n                    let allAssetId = sdas.filter(sda => {\n                        return sda.amountIsRaw;\n                    }).map(sda => _typeHelper__WEBPACK_IMPORTED_MODULE_6__[\"Helper\"].createAssetId(sda.id));\n                    if (namespaceIds.length || allAssetId.length) {\n                        let namespacesNames = [];\n                        namespacesNames = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.namespaceAPI.getNamespacesName(namespaceIds);\n                        let assetsProperties = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.assetAPI.getMosaics(allAssetId);\n                        let aliasNames = yield _state_appState__WEBPACK_IMPORTED_MODULE_7__[\"AppState\"].chainAPI.assetAPI.getMosaicsNames(allAssetId);\n                        for (let x = 0; x < sdas.length; ++x) {\n                            let assetProperties = assetsProperties.filter(aliasName => aliasName.mosaicId.toHex() === sdas[x].id)[0];\n                            sdas[x].divisibility = assetProperties.divisibility;\n                            sdas[x].amount = TransactionUtils.convertToExactAmount(sdas[x].amount, assetProperties.divisibility);\n                            sdas[x].amountIsRaw = false;\n                            let mosaicNames = aliasNames.filter(aliaName => aliaName.mosaicId.toHex() === sdas[x].id)[0];\n                            let currentAliasNames = mosaicNames.names;\n                            sdas[x].currentAlias = currentAliasNames.map(currentAlias => {\n                                return { name: currentAlias.name, id: currentAlias.namespaceId.toDTO().id, idHex: currentAlias.namespaceId.toHex() };\n                            });\n                            if (sdas[x].sendWithAlias) {\n                                sdas[x].sendWithAlias.name = namespacesNames\n                                    .filter(nsName => nsName.namespaceId.toHex() === sdas[x].sendWithAlias.idHex)\n                                    .map(nsName => nsName.name)[0];\n                            }\n                        }\n                    }\n                }\n                txn.sda = sdas;\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n}\n\n\n//# sourceURL=webpack:///./src/models/util/transactionUtils.ts?");

/***/ }),

/***/ "./src/models/util/typeHelper.ts":
/*!***************************************!*\
  !*** ./src/models/util/typeHelper.ts ***!
  \***************************************/
/*! exports provided: Helper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Helper\", function() { return Helper; });\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tsjs-xpx-chain-sdk */ \"./node_modules/tsjs-xpx-chain-sdk/dist/index.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var crypto_js_enc_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto-js/enc-base64 */ \"./node_modules/crypto-js/enc-base64.js\");\n/* harmony import */ var crypto_js_enc_base64__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto_js_enc_base64__WEBPACK_IMPORTED_MODULE_1__);\n\n\nclass Helper {\n    static createPasswordInstance(password) {\n        return new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"Password\"](password);\n    }\n    static createPlainMessage(message) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"PlainMessage\"].create(message);\n    }\n    static createEncryptedMessage(message, recipientPublicKey, networkType, senderPrivateKey) {\n        const publicAccount = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"PublicAccount\"].createFromPublicKey(recipientPublicKey, networkType);\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"EncryptedMessage\"].create(message, publicAccount, senderPrivateKey);\n    }\n    static createEncryptedMessageFromEncoded(payload) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"EncryptedMessage\"].createFromPayload(payload);\n    }\n    static createUint64FromNumber(number) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"UInt64\"].fromUint(number);\n    }\n    static createAsset(mosaicId, amount) {\n        return new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"Mosaic\"](new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"MosaicId\"](mosaicId), tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"UInt64\"].fromUint(amount));\n    }\n    static createAssetId(mosaicId) {\n        return new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"MosaicId\"](mosaicId);\n    }\n    static createNamespaceId(name) {\n        return new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"NamespaceId\"](name);\n    }\n    static appendInnerTransaction(transactions, publicKeyTosign, innerTransactions) {\n        const networkType = transactions[0].networkType;\n        const publicAccount = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"PublicAccount\"].createFromPublicKey(publicKeyTosign, networkType);\n        transactions.forEach((transaction) => {\n            innerTransactions.push(transaction.toAggregate(publicAccount));\n        });\n        return innerTransactions;\n    }\n    static createInnerTransaction(transactions, publicKeyTosign) {\n        const networkType = transactions[0].networkType;\n        const publicAccount = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"PublicAccount\"].createFromPublicKey(publicKeyTosign, networkType);\n        const newInnerTransaction = [];\n        transactions.forEach((transaction) => {\n            newInnerTransaction.push(transaction.toAggregate(publicAccount));\n        });\n        return newInnerTransaction;\n    }\n    static createAddress(address) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"Address\"].createFromRawAddress(address);\n    }\n    static checkAddressNetwork(address, networkType) {\n        return address.networkType === networkType;\n    }\n    static getMosaicSupplyType() {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"MosaicSupplyType\"];\n    }\n    static createPublicAccount(publicKey, network) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"PublicAccount\"].createFromPublicKey(publicKey, network);\n    }\n    static createAccount(privateKey, network) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"Account\"].createFromPrivateKey(privateKey, network);\n    }\n    static createNonceRandom() {\n        const nonce = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"MosaicNonce\"].createRandom();\n        return nonce;\n    }\n    static createTransactionHash(hash, transactionType) {\n        return new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionHash\"](hash, transactionType);\n    }\n    static createTransactionQueryParams() {\n        return new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionQueryParams\"]();\n    }\n    static createMetadataQueryParams() {\n        return new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"MetadataQueryParams\"]();\n    }\n    static createTransactionFieldOrder(order, sortingField) {\n        return new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionFieldOrder\"](order, sortingField);\n    }\n    static getQueryParamOrder() {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"Order\"];\n    }\n    static getQueryParamOrder_v2() {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"Order_v2\"];\n    }\n    static getTransactionSortField() {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionSortingField\"];\n    }\n    static getTransactionGroupType() {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionGroupType\"];\n    }\n    static getAliasActionType() {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"AliasActionType\"];\n    }\n    static base64decode(toDecode) {\n        return crypto_js_enc_base64__WEBPACK_IMPORTED_MODULE_1___default.a.parse(toDecode);\n    }\n    static base64encode(toEncode) {\n        return crypto_js_enc_base64__WEBPACK_IMPORTED_MODULE_1___default.a.stringify(toEncode);\n    }\n    static amountFormatterSimple(amount, d = 6) {\n        const amountDivisibility = Number(amount) / Math.pow(10, d);\n        return amountDivisibility.toLocaleString('en-us', {\n            minimumFractionDigits: d\n        });\n    }\n    static convertDisplayDateTimeFormat(dateTimeJSON) {\n        const date = new Date(dateTimeJSON);\n        return new Intl.DateTimeFormat('default', {\n            year: 'numeric', month: 'numeric', day: 'numeric',\n            hour: 'numeric', minute: 'numeric', second: 'numeric'\n        }).format(date);\n    }\n    static convertDisplayDateTimeFormat24(dateTimeJSON) {\n        const date = new Date(dateTimeJSON);\n        return new Intl.DateTimeFormat('default', {\n            year: 'numeric', month: 'numeric', day: 'numeric',\n            hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: false,\n        }).format(date);\n    }\n    static formatDeadline(timestamp) {\n        return Helper.convertDisplayDateTimeFormat24(new Date(timestamp + tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"Deadline\"].timestampNemesisBlock * 1000).toISOString());\n    }\n    static formatFixedDateTime(dateTimeJSON) {\n        const newDate = new Date(dateTimeJSON);\n        return new Intl.DateTimeFormat('en-GB', {\n            year: 'numeric', month: 'numeric', day: 'numeric',\n            hour: 'numeric', minute: 'numeric', second: 'numeric'\n        }).format(newDate);\n    }\n    static numberToJSONDate(dateNumber) {\n        const newDate = new Date(dateNumber);\n        return newDate.toISOString();\n    }\n    static convertToCurrency(value, divisibility) {\n        const exactValue = value / Math.pow(10, divisibility);\n        return new Intl.NumberFormat('en', { maximumFractionDigits: divisibility }).format(exactValue);\n    }\n    static toCurrencyFormat(value, divisibility) {\n        const exactValue = value;\n        return new Intl.NumberFormat('en', { maximumFractionDigits: divisibility }).format(exactValue);\n    }\n    static convertNumberMinimumFormat(value, decimalPoint) {\n        return parseFloat(value.toFixed(decimalPoint));\n    }\n    static createQueryParams(pageSize, idToStartFrom) {\n        return new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"QueryParams\"](pageSize, idToStartFrom);\n    }\n    static checkIsJSON(data) {\n        try {\n            JSON.parse(data);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    static createCosignatureTransaction(signedABT) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"CosignatureTransaction\"].create(signedABT);\n    }\n    static validateBuildSelectAccountBalance(balanceAccount, feeTransaction, rental) {\n        const totalFee = feeTransaction + rental;\n        return balanceAccount >= totalFee;\n    }\n}\nHelper.convertToExact = (value, divisibility) => {\n    return value / Math.pow(10, divisibility);\n};\nHelper.convertToAbsolute = (value, divisibility) => {\n    return value * Math.pow(10, divisibility);\n};\n\n\n//# sourceURL=webpack:///./src/models/util/typeHelper.ts?");

/***/ })

}]);